#!/usr/bin/env python3
"""
üîç Script de V√©rification de D√©ploiement TontiFlex
=================================================

V√©rifie que tous les composants sont pr√™ts pour le d√©ploiement sur Render.
"""

import os
import sys
import subprocess
from pathlib import Path

def check_file_exists(filepath, description):
    """V√©rifie qu'un fichier existe"""
    if Path(filepath).exists():
        print(f"‚úÖ {description}: {filepath}")
        return True
    else:
        print(f"‚ùå {description}: {filepath} - MANQUANT")
        return False

def check_requirements():
    """V√©rifie les fichiers requirements"""
    print("\nüì¶ V√©rification des Requirements:")
    
    files_ok = True
    files_ok &= check_file_exists("requirements.txt", "Requirements de base")
    files_ok &= check_file_exists("requirements-production.txt", "Requirements de production")
    
    # V√©rifier les d√©pendances critiques
    if Path("requirements-production.txt").exists():
        with open("requirements-production.txt", "r") as f:
            content = f.read()
            
        critical_deps = [
            "django>=5.2.0",
            "gunicorn>=23.0.0",
            "whitenoise>=6.9.0",
            "dj-database-url>=3.0.0",
            "psycopg2-binary>=2.9.10",
            "kkiapay==0.0.6",
            "requests==2.22.0"
        ]
        
        for dep in critical_deps:
            if dep.split(">=")[0].split("==")[0] in content:
                print(f"‚úÖ   {dep}")
            else:
                print(f"‚ùå   {dep} - MANQUANT")
                files_ok = False
    
    return files_ok

def check_build_script():
    """V√©rifie le script de build"""
    print("\nüî® V√©rification du Script de Build:")
    
    if not check_file_exists("build.sh", "Script de build"):
        return False
    
    # V√©rifier que le script est ex√©cutable
    try:
        result = subprocess.run(['ls', '-la', 'build.sh'], capture_output=True, text=True)
        if 'x' in result.stdout:
            print("‚úÖ build.sh est ex√©cutable")
        else:
            print("‚ö†Ô∏è  build.sh pourrait ne pas √™tre ex√©cutable (chmod +x build.sh)")
    except:
        print("‚ö†Ô∏è  Impossible de v√©rifier les permissions de build.sh")
    
    return True

def check_render_config():
    """V√©rifie la configuration Render"""
    print("\n‚öôÔ∏è  V√©rification de la Configuration Render:")
    
    return check_file_exists("render.yaml", "Configuration Render")

def check_django_settings():
    """V√©rifie les settings Django"""
    print("\nüîß V√©rification des Settings Django:")
    
    settings_file = "tontiflex/settings.py"
    if not check_file_exists(settings_file, "Settings Django"):
        return False
    
    with open(settings_file, "r") as f:
        content = f.read()
    
    # V√©rifications critiques
    checks = [
        ("ALLOWED_HOSTS", "Configuration ALLOWED_HOSTS"),
        ("whitenoise", "WhiteNoise middleware"),
        ("dj_database_url", "Support PostgreSQL"),
        ("STATIC_ROOT", "Configuration fichiers statiques"),
        ("KKIAPAY_WEBHOOK_URL", "Configuration webhook KKiaPay"),
        ("tontiflexapp.onrender.com", "URL de production")
    ]
    
    all_ok = True
    for check, description in checks:
        if check in content:
            print(f"‚úÖ {description}")
        else:
            print(f"‚ùå {description} - MANQUANT")
            all_ok = False
    
    return all_ok

def check_git_status():
    """V√©rifie le statut Git"""
    print("\nüìù V√©rification du Statut Git:")
    
    try:
        # V√©rifier s'il y a des changements non commit√©s
        result = subprocess.run(['git', 'status', '--porcelain'], capture_output=True, text=True)
        if result.stdout.strip():
            print("‚ö†Ô∏è  Il y a des changements non commit√©s:")
            print(result.stdout)
        else:
            print("‚úÖ Tous les changements sont commit√©s")
        
        # V√©rifier la branche actuelle
        result = subprocess.run(['git', 'branch', '--show-current'], capture_output=True, text=True)
        branch = result.stdout.strip()
        print(f"üìç Branche actuelle: {branch}")
        
        if branch != "main":
            print("‚ö†Ô∏è  Vous n'√™tes pas sur la branche 'main'")
        
        return True
    except:
        print("‚ùå Git n'est pas configur√© ou accessible")
        return False

def check_environment_variables():
    """V√©rifie les variables d'environnement critiques"""
    print("\nüåç Variables d'Environnement Critiques pour Render:")
    
    critical_vars = [
        "DEBUG",
        "SECRET_KEY", 
        "DATABASE_URL",
        "KKIAPAY_PUBLIC_KEY",
        "KKIAPAY_PRIVATE_KEY",
        "KKIAPAY_SECRET_KEY",
        "KKIAPAY_WEBHOOK_URL",
        "ALLOWED_HOSTS"
    ]
    
    print("üìã √Ä configurer sur Render:")
    for var in critical_vars:
        print(f"   - {var}")
    
    return True

def main():
    """Fonction principale"""
    print("üöÄ V√©rification de D√©ploiement TontiFlex sur Render")
    print("=" * 55)
    
    # V√©rifier qu'on est dans le bon r√©pertoire
    if not Path("manage.py").exists():
        print("‚ùå ERREUR: Ce script doit √™tre ex√©cut√© depuis la racine du projet Django")
        sys.exit(1)
    
    all_checks = [
        check_requirements(),
        check_build_script(),
        check_render_config(),
        check_django_settings(),
        check_git_status(),
        check_environment_variables()
    ]
    
    print("\n" + "=" * 55)
    
    if all(all_checks):
        print("üéâ SUCC√àS: Votre projet est pr√™t pour le d√©ploiement sur Render!")
        print("\nüìö Prochaines √©tapes:")
        print("1. Pusher les changements: git push origin main")
        print("2. Cr√©er un Web Service sur https://dashboard.render.com")
        print("3. Configurer les variables d'environnement")
        print("4. Voir RENDER_DEPLOYMENT_GUIDE.md pour les d√©tails")
    else:
        print("‚ö†Ô∏è  ATTENTION: Certaines v√©rifications ont √©chou√©")
        print("Corrigez les probl√®mes avant de d√©ployer.")
        sys.exit(1)

if __name__ == "__main__":
    main()
