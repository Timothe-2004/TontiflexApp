"""
Views Django REST Framework pour le module Notifications.
"""
from rest_framework import viewsets, permissions, status
from rest_framework.decorators import action
from rest_framework.response import Response
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiExample, OpenApiResponse

from .models import Notification
from .serializers import NotificationSerializer, NotificationCreateSerializer


@extend_schema_view(
    list=extend_schema(
        summary="Liste des notifications de l'utilisateur",
        description="""
        Affiche la liste des notifications re√ßues par l'utilisateur connect√©.
        
        Types de notifications TontiFlex:
        
        üìß Pour les Clients:
        Confirmation d'adh√©sion √† une tontine
        Confirmation de cotisation re√ßue
        Rappel de cotisation quotidienne
        Notification de distribution (tour de r√©ception)
        Confirmation de retrait trait√©
        Rejet de demande (avec motif)
        
        üì® Pour les Agents SFD:
        Nouvelle demande d'adh√©sion √† valider
        Document d'identit√© √† v√©rifier
        Demande de retrait en attente
        Notification de validation requise
        
        üì© Pour les Superviseurs SFD:
        Nouvelle demande de pr√™t √† examiner
        Dossier transmis par un agent
        √âch√©ance de remboursement proche
        Pr√™t en retard de paiement
        
        üì¨ Pour les Admins SFD:
        Rapport hebdomadaire d'activit√©
        Nouvelle tontine cr√©√©e
        Statistiques de performance
        Alertes syst√®me importantes
        
        Statuts de notification:
        non_lue: Notification non consult√©e (badge rouge)
        lue: Notification consult√©e par l'utilisateur
        archivee: Notification archiv√©e (masqu√©e par d√©faut)
        
        Tri et filtres:
        Tri par date (plus r√©centes en premier)
        Filtre par type de notification
        Filtre par statut (lue/non lue)
        Recherche dans le contenu
        """,
        responses={200: NotificationSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er une nouvelle notification",
        description="""
        Cr√©e et envoie une nouvelle notification √† un utilisateur.
        
        Processus d'envoi:
        1. Validation du destinataire et du contenu
        2. Cr√©ation de la notification en base
        3. Envoi par les canaux configur√©s (email/SMS)
        4. Mise √† jour des compteurs de notifications
        
        Canaux de livraison:
        Notification in-app: Toujours activ√©e
        Email: Si l'utilisateur a un email valide
        SMS: Si l'utilisateur a activ√© les SMS
        Push: Si l'application mobile est install√©e
        
        Mod√®les de notification:
        Templates pr√©d√©finis pour chaque type d'√©v√©nement
        Variables dynamiques (nom, montant, date, etc.)        Support multilingue (fran√ßais, local languages)
        Personnalisation selon le type d'utilisateur
        
        Permissions requises: Admin SFD ou Admin plateforme
        """,
        request=NotificationCreateSerializer,
        responses={
            201: NotificationSerializer,
            400: OpenApiResponse(description="Donn√©es invalides ou destinataire introuvable"),
            403: OpenApiResponse(description="Permissions insuffisantes")
        },
        examples=[
            OpenApiExample(
                "Notification adh√©sion confirm√©e",
                value={
                    "destinataire_id": 123,
                    "type_notification": "ADHESION_CONFIRMEE",
                    "titre": "Adh√©sion confirm√©e ‚úÖ",
                    "message": "Votre adh√©sion √† la tontine 'Commer√ßants Cotonou' a √©t√© confirm√©e. Votre premi√®re cotisation est attendue demain.",
                    "envoyer_email": True,
                    "envoyer_sms": False,
                    "priorite": "NORMALE"
                }
            ),
            OpenApiExample(
                "Rappel cotisation",
                value={
                    "destinataire_id": 456,
                    "type_notification": "RAPPEL_COTISATION",
                    "titre": "Rappel: Cotisation du jour üí∞",
                    "message": "N'oubliez pas votre cotisation quotidienne de 25,000 FCFA pour la tontine '√âpargne Famille'.",
                    "envoyer_email": False,
                    "envoyer_sms": True,
                    "priorite": "HAUTE"
                }
            )
        ]
    ),
    retrieve=extend_schema(
        summary="D√©tails d'une notification",
        description="R√©cup√®re les informations d√©taill√©es d'une notification sp√©cifique avec son historique de livraison."
    ),
    update=extend_schema(
        summary="Modifier une notification",
        description="""
        Met √† jour une notification existante.
        
        Modifications possibles:
        Statut de lecture (non_lue/lue/archivee)
        Contenu du message (si non envoy√©e)
        Param√®tres de livraison
        Priorit√© de la notification
        
        Restrictions: Certaines modifications possibles uniquement avant envoi
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'une notification",
        description="Met √† jour partiellement une notification (uniquement les champs fournis)."
    ),
    destroy=extend_schema(
        summary="Supprimer une notification",
        description="""
        Supprime d√©finitivement une notification.
        
        Conditions:
        Notification non critique
        Autorisation de l'administrateur
        Respect de la politique de r√©tention
        
        Effets: Suppression compl√®te des donn√©es
        """
    )
)
@extend_schema(tags=["üîî Notifications"])
class NotificationViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour la gestion des notifications
    """
    queryset = Notification.objects.all()
    permission_classes = [permissions.IsAuthenticated]

    def get_serializer_class(self):
        if self.action == 'create':
            return NotificationCreateSerializer
        return NotificationSerializer

    def get_queryset(self):
        """Filter notifications based on user"""
        user = self.request.user
        
        # Chaque utilisateur ne voit que ses propres notifications
        user_profile = None
        if hasattr(user, 'clientsfd'):
            user_profile = user.clientsfd
        elif hasattr(user, 'agentsfd'):
            user_profile = user.agentsfd
        elif hasattr(user, 'superviseurssfd'):
            user_profile = user.superviseurssfd
        elif hasattr(user, 'administrateurssfd'):
            user_profile = user.administrateurssfd
        elif hasattr(user, 'adminplateforme'):
            user_profile = user.adminplateforme
        
        if user_profile:
            return Notification.objects.filter(destinataire=user_profile).order_by('-date_creation')
        
        return Notification.objects.none()

    @extend_schema(
        summary="Marquer une notification comme lue",
        description="""
        Marque une notification sp√©cifique comme lue par l'utilisateur.
        
        **Effet de l'action**:
        - Statut de la notification passe √† 'lue'
        - Mise √† jour du timestamp de lecture
        - D√©cr√©ment du compteur de notifications non lues
        - Notification supprim√©e des badges d'alerte
        
        **Permissions requises**:
        - Propri√©taire de la notification uniquement
        - Auto-v√©rification: un utilisateur ne peut marquer que ses propres notifications
        
        **Cas d'usage**:
        - Clic sur une notification dans l'interface
        - Lecture compl√®te du contenu
        - Acquittement d'une alerte importante
        """,
        responses={
            200: NotificationSerializer,
            403: OpenApiResponse(description="Notification non accessible"),
            404: OpenApiResponse(description="Notification introuvable")
        },
        examples=[
            OpenApiExample(
                "Succ√®s marquage lecture",
                value={
                    "success": True,
                    "message": "Notification marqu√©e comme lue",
                    "notification": {
                        "id": 123,
                        "titre": "Cotisation confirm√©e",
                        "est_lue": True,
                        "date_lecture": "2025-06-25T14:30:00Z"
                    }
                }
            )
        ]
    )
    @action(detail=True, methods=['post'], url_path='marquer-lue')
    def marquer_lue(self, request, pk=None):
        """
        POST /api/notifications/{id}/marquer-lue/
        Marque une notification comme lue
        """
        notification = self.get_object()
        
        if not notification.est_lue:
            notification.marquer_comme_lue()
        
        return Response({
            'success': True,
            'message': 'Notification marqu√©e comme lue',
            'notification': NotificationSerializer(notification).data
        })

    @extend_schema(
        summary="Marquer toutes les notifications comme lues",
        description="""
        Marque toutes les notifications non lues de l'utilisateur comme lues en une seule action.
        
        **Action de masse**:
        - Traitement de toutes les notifications non lues
        - Mise √† jour en lot pour optimiser les performances
        - Remise √† z√©ro du compteur de notifications
        - Effacement de tous les badges d'alerte
        
        **Utilisation typique**:
        - Bouton "Tout marquer comme lu" dans l'interface
        - Nettoyage rapide des notifications
        - Remise √† z√©ro apr√®s une p√©riode d'absence
        
        **R√©ponse**:
        - Nombre de notifications trait√©es
        - Confirmation de l'action effectu√©e
        - Statut mis √† jour de l'utilisateur
        """,
        responses={
            200: OpenApiResponse(
                description="Toutes les notifications marqu√©es comme lues",
                examples=[
                    OpenApiExample(
                        "Succ√®s marquage en masse",
                        value={
                            "success": True,
                            "message": "15 notifications marqu√©es comme lues",
                            "notifications_mises_a_jour": 15
                        }
                    )
                ]
            )
        }
    )
    @action(detail=False, methods=['post'], url_path='marquer-toutes-lues')
    def marquer_toutes_lues(self, request):
        """
        POST /api/notifications/marquer-toutes-lues/
        Marque toutes les notifications de l'utilisateur comme lues
        """
        notifications = self.get_queryset().filter(est_lue=False)
        count = notifications.count()
        
        for notification in notifications:
            notification.marquer_comme_lue()
        
        return Response({
            'success': True,
            'message': f'{count} notifications marqu√©es comme lues',
            'notifications_mises_a_jour': count
        })

    @extend_schema(
        summary="R√©cup√©rer les notifications non lues",
        description="""
        Retourne uniquement les notifications non lues de l'utilisateur connect√©.
        
        **Utilisation principale**:
        - Affichage des badges de notification (compteur rouge)
        - Pop-ups d'alerte pour nouveaux √©v√©nements
        - Notifications push en temps r√©el
        - V√©rification p√©riodique de nouvelles notifications
        
        **Optimisations**:
        - Requ√™te rapide avec index sur 'est_lue'
        - Tri par priorit√© et date
        - Limitation automatique aux 50 plus r√©centes
        - Cache pour r√©duire la charge serveur
        
        **R√©ponse optimis√©e**:
        - Nombre total de notifications non lues
        - Liste des notifications avec donn√©es essentielles
        - Indicateur de priorit√© pour l'affichage
        - Timestamp pour la synchronisation
        """,
        responses={
            200: OpenApiResponse(
                description="Notifications non lues r√©cup√©r√©es",
                examples=[
                    OpenApiExample(
                        "Notifications non lues",
                        value={
                            "count": 3,
                            "notifications": [
                                {
                                    "id": 456,
                                    "titre": "Nouvelle demande d'adh√©sion",
                                    "message": "Un client souhaite rejoindre votre tontine",
                                    "type_notification": "DEMANDE_ADHESION",
                                    "priorite": "HAUTE",
                                    "date_creation": "2025-06-25T09:15:00Z"
                                },
                                {
                                    "id": 457,
                                    "titre": "Cotisation re√ßue",
                                    "message": "Cotisation de 25,000 FCFA confirm√©e",
                                    "type_notification": "COTISATION_CONFIRMEE",
                                    "priorite": "NORMALE",
                                    "date_creation": "2025-06-25T08:30:00Z"
                                }
                            ]
                        }
                    )
                ]
            )
        }
    )
    @action(detail=False, methods=['get'], url_path='non-lues')
    def non_lues(self, request):
        """
        GET /api/notifications/non-lues/
        Retourne les notifications non lues de l'utilisateur
        """
        notifications = self.get_queryset().filter(est_lue=False)
        serializer = NotificationSerializer(notifications, many=True)
        
        return Response({
            'count': notifications.count(),
            'notifications': serializer.data
        })
