"""
Gestion des webhooks KKiaPay pour TontiFlex
==========================================

Traite les callbacks de statut des transactions KKiaPay selon la documentation officielle.
Documentation : https://docs.kkiapay.me/v1/compte/kkiapay-sandbox-guide-de-test
"""
import logging
import hashlib
import hmac
from typing import Dict, Any, Optional
from django.http import HttpResponse, HttpResponseBadRequest
from django.views.decorators.csrf import csrf_exempt
from django.views.decorators.http import require_POST
from django.utils.decorators import method_decorator
from django.views import View
from django.conf import settings
import json

from .services import kkiapay_service
from .config import kkiapay_config

logger = logging.getLogger(__name__)


@method_decorator(csrf_exempt, name='dispatch')
@method_decorator(require_POST, name='dispatch')
class KKiaPayWebhookView(View):
    """
    Vue pour traiter les webhooks KKiaPay
    """
    
    def post(self, request):
        """
        Traite un webhook re√ßu de KKiaPay
        """
        try:
            # R√©cup√©ration du payload
            payload = request.body
            
            # Validation de la signature (si configur√©e)
            if not self._validate_signature(request, payload):
                logger.warning("üö® Signature webhook KKiaPay invalide")
                return HttpResponseBadRequest("Signature invalide")
            
            # Parsing des donn√©es JSON
            webhook_data = json.loads(payload.decode('utf-8'))
            
            logger.info(f"üì• Webhook KKiaPay re√ßu: {webhook_data.get('type', 'UNKNOWN')}")
            
            # Traitement du webhook via le service
            transaction = kkiapay_service.process_webhook(webhook_data)
            
            if transaction:
                logger.info(f"‚úÖ Webhook trait√© avec succ√®s: {transaction.reference_tontiflex}")
                
                # D√©clencher les actions post-paiement selon le type
                self._trigger_post_payment_actions(transaction)
                
                return HttpResponse("Webhook trait√© avec succ√®s", status=200)
            else:
                logger.error("‚ùå √âchec du traitement du webhook")
                return HttpResponseBadRequest("√âchec du traitement")
                
        except json.JSONDecodeError:
            logger.error("‚ùå Payload webhook invalide (JSON malform√©)")
            return HttpResponseBadRequest("JSON invalide")
        except Exception as e:
            logger.error(f"‚ùå Erreur traitement webhook: {str(e)}")
            return HttpResponseBadRequest(f"Erreur: {str(e)}")
    
    def _validate_signature(self, request, payload: bytes) -> bool:
        """
        Valide la signature du webhook KKiaPay
        """
        if not kkiapay_config.webhook_secret:
            # Si pas de secret configur√©, on accepte (mode d√©veloppement)
            logger.warning("‚ö†Ô∏è Validation signature d√©sactiv√©e - secret webhook manquant")
            return True
        
        # R√©cup√©ration de la signature depuis les headers
        signature_header = request.META.get('HTTP_X_KKIAPAY_SIGNATURE', '')
        
        if not signature_header:
            logger.warning("‚ö†Ô∏è Header signature manquant")
            return True  # En mode d√©veloppement, on accepte
        
        # Calcul de la signature attendue
        expected_signature = hmac.new(
            kkiapay_config.webhook_secret.encode('utf-8'),
            payload,
            hashlib.sha256
        ).hexdigest()
        
        # Comparaison s√©curis√©e
        return hmac.compare_digest(signature_header, expected_signature)
    
    def _trigger_post_payment_actions(self, transaction):
        """
        D√©clenche les actions appropri√©es apr√®s un paiement r√©ussi
        """
        if not transaction.is_success():
            return
        
        try:
            # Actions selon le type de transaction
            if transaction.type_transaction == 'adhesion_tontine':
                self._handle_tontine_adhesion_success(transaction)
            elif transaction.type_transaction == 'cotisation_tontine':
                self._handle_tontine_cotisation_success(transaction)
            elif transaction.type_transaction in ['depot_epargne', 'frais_creation_epargne']:
                self._handle_savings_success(transaction)
            elif transaction.type_transaction == 'remboursement_pret':
                self._handle_loan_repayment_success(transaction)
                
        except Exception as e:
            logger.error(f"‚ùå Erreur actions post-paiement: {str(e)}")
    
    def _handle_tontine_adhesion_success(self, transaction):
        """Actions apr√®s r√©ussite d'une adh√©sion tontine"""
        logger.info(f"üéØ Traitement adh√©sion tontine r√©ussie: {transaction.reference_tontiflex}")
        # TODO: Int√©grer avec le mod√®le Adhesion
        
    def _handle_tontine_cotisation_success(self, transaction):
        """Actions apr√®s r√©ussite d'une cotisation tontine"""
        logger.info(f"üí∞ Traitement cotisation tontine r√©ussie: {transaction.reference_tontiflex}")
        # TODO: Int√©grer avec le mod√®le Cotisation
        
    def _handle_savings_success(self, transaction):
        """Actions apr√®s r√©ussite d'une transaction √©pargne"""
        logger.info(f"üè¶ Traitement √©pargne r√©ussie: {transaction.reference_tontiflex}")
        # TODO: Int√©grer avec le mod√®le SavingsAccount
        
    def _handle_loan_repayment_success(self, transaction):
        """Actions apr√®s r√©ussite d'un remboursement pr√™t"""
        logger.info(f"üí≥ Traitement remboursement pr√™t r√©ussi: {transaction.reference_tontiflex}")
        # TODO: Int√©grer avec le mod√®le Loan


def webhook_view(request):
    """
    Vue fonction pour les webhooks KKiaPay (alternative)
    """
    return KKiaPayWebhookView.as_view()(request)
