# Generated by Django 5.2.1 on 2025-06-28 08:44

import django.core.validators
import django.db.models.deletion
import uuid
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        ('payments', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='LoanApplication',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant unique de la demande de prêt', primary_key=True, serialize=False)),
                ('statut', models.CharField(choices=[('soumis', 'Soumis'), ('en_cours_examen', "En cours d'examen"), ('transfere_admin', 'Transféré à Admin'), ('accorde', 'Accordé'), ('decaisse', 'Décaissé'), ('en_remboursement', 'En remboursement'), ('solde', 'Soldé'), ('rejete', 'Rejeté')], default='soumis', help_text='Statut actuel de la demande dans le workflow', max_length=20)),
                ('date_soumission', models.DateTimeField(auto_now_add=True, help_text='Date de soumission initiale de la demande')),
                ('date_examen_superviseur', models.DateTimeField(blank=True, help_text="Date d'examen par le superviseur", null=True)),
                ('date_transfert_admin', models.DateTimeField(blank=True, help_text="Date de transfert obligatoire à l'admin", null=True)),
                ('date_validation_admin', models.DateTimeField(blank=True, help_text="Date de validation finale par l'admin", null=True)),
                ('date_decaissement', models.DateTimeField(blank=True, help_text='Date de décaissement physique du prêt', null=True)),
                ('nom', models.CharField(help_text='Nom de famille (peut différer du compte client)', max_length=100)),
                ('prenom', models.CharField(help_text='Prénom (peut différer du compte client)', max_length=100)),
                ('date_naissance', models.DateField(help_text='Date de naissance du demandeur')),
                ('adresse_domicile', models.TextField(help_text='Adresse complète du domicile')),
                ('adresse_bureau', models.TextField(blank=True, help_text='Adresse du lieu de travail/bureau')),
                ('situation_familiale', models.CharField(choices=[('celibataire', 'Célibataire'), ('marie', 'Marié(e)'), ('divorce', 'Divorcé(e)'), ('veuf', 'Veuf/Veuve'), ('union_libre', 'Union libre')], help_text='Situation familiale du demandeur', max_length=20)),
                ('telephone', models.CharField(help_text='Numéro de téléphone principal', max_length=15)),
                ('email', models.EmailField(help_text='Adresse email du demandeur', max_length=254)),
                ('situation_professionnelle', models.TextField(help_text='Description détaillée: emploi, entreprise, fonction')),
                ('justificatif_identite', models.CharField(help_text="Type de justificatif d'identité fourni", max_length=50)),
                ('revenu_mensuel', models.DecimalField(decimal_places=2, help_text='Revenu mensuel total en FCFA', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('charges_mensuelles', models.DecimalField(decimal_places=2, help_text='Charges mensuelles totales en FCFA', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('historique_prets_anterieurs', models.TextField(blank=True, help_text='Historique des prêts antérieurs et leur statut')),
                ('plan_affaires', models.TextField(blank=True, help_text="Plan d'affaires pour prêts professionnels (optionnel)")),
                ('montant_souhaite', models.DecimalField(decimal_places=2, help_text='Montant du prêt souhaité en FCFA', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('10000.00'))])),
                ('duree_pret', models.PositiveIntegerField(help_text='Durée du prêt en mois (1-60)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(60)])),
                ('type_pret', models.CharField(choices=[('consommation', 'Prêt à la consommation'), ('immobilier', 'Prêt immobilier'), ('professionnel', 'Prêt professionnel'), ('urgence', "Prêt d'urgence")], help_text='Type de prêt demandé', max_length=20)),
                ('objet_pret', models.TextField(help_text="Description détaillée de l'objet du prêt")),
                ('type_garantie', models.CharField(choices=[('bien_immobilier', 'Bien immobilier'), ('garant_physique', 'Garant physique'), ('depot_garantie', 'Dépôt de garantie'), ('aucune', 'Aucune garantie')], help_text='Type de garantie proposée', max_length=20)),
                ('details_garantie', models.TextField(blank=True, help_text='Détails de la garantie (description, valeur, etc.)')),
                ('signature_caution', models.BooleanField(default=False, help_text='Signature de caution fournie si exigée')),
                ('signature_collecte_donnees', models.BooleanField(default=False, help_text='Consentement pour la collecte et traitement des données')),
                ('document_complet', models.FileField(help_text='Document PDF consolidé avec toutes les pièces justificatives', upload_to='loans/documents/', validators=[django.core.validators.FileExtensionValidator(allowed_extensions=['pdf'])])),
                ('commentaires_superviseur', models.TextField(blank=True, help_text="Commentaires du superviseur lors de l'examen")),
                ('commentaires_admin', models.TextField(blank=True, help_text="Commentaires de l'admin lors de la validation")),
                ('raison_rejet', models.TextField(blank=True, help_text='Raison du rejet si demande refusée')),
                ('score_fiabilite', models.DecimalField(blank=True, decimal_places=2, help_text='Score de fiabilité calculé automatiquement (0-100)', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('100.00'))])),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text="Date de création de l'enregistrement")),
                ('date_modification', models.DateTimeField(auto_now=True, help_text='Date de dernière modification')),
                ('admin_validateur', models.ForeignKey(blank=True, help_text='Admin SFD ayant validé définitivement', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prets_valides', to='accounts.administrateursfd')),
                ('client', models.ForeignKey(help_text='Client demandeur du prêt', on_delete=django.db.models.deletion.CASCADE, related_name='demandes_prets', to='accounts.client')),
                ('superviseur_examinateur', models.ForeignKey(blank=True, help_text='Superviseur SFD ayant examiné la demande', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='demandes_examinees', to='accounts.superviseursfd')),
            ],
            options={
                'verbose_name': 'Demande de Prêt',
                'verbose_name_plural': 'Demandes de Prêt',
                'db_table': 'loans_application',
                'ordering': ['-date_soumission'],
            },
        ),
        migrations.CreateModel(
            name='Loan',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant unique du prêt', primary_key=True, serialize=False)),
                ('montant_accorde', models.DecimalField(decimal_places=2, help_text='Montant effectivement accordé', max_digits=12)),
                ('statut', models.CharField(choices=[('accorde', 'Accordé'), ('en_attente_decaissement', 'En attente décaissement'), ('decaisse', 'Décaissé'), ('en_remboursement', 'En remboursement'), ('solde', 'Soldé'), ('en_defaut', 'En défaut')], default='accorde', help_text='Statut actuel du prêt', max_length=25)),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text='Date de création du prêt (accord admin)')),
                ('date_decaissement', models.DateTimeField(blank=True, help_text='Date effective du décaissement', null=True)),
                ('admin_decaisseur', models.ForeignKey(blank=True, help_text='Admin ayant marqué le prêt comme décaissé', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='prets_decaisses', to='accounts.administrateursfd')),
                ('client', models.ForeignKey(help_text='Client bénéficiaire du prêt', on_delete=django.db.models.deletion.CASCADE, related_name='prets', to='accounts.client')),
                ('demande', models.OneToOneField(help_text='Demande de prêt associée', on_delete=django.db.models.deletion.CASCADE, related_name='pret_accorde', to='loans.loanapplication')),
            ],
            options={
                'verbose_name': 'Prêt',
                'verbose_name_plural': 'Prêts',
                'db_table': 'loans_loan',
                'ordering': ['-date_creation'],
            },
        ),
        migrations.CreateModel(
            name='LoanTerms',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('taux_interet_annuel', models.DecimalField(decimal_places=2, help_text="Taux d'intérêt annuel en pourcentage", max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('50.00'))])),
                ('jour_echeance_mensuelle', models.PositiveIntegerField(help_text='Jour du mois pour les échéances (1-31)', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(31)])),
                ('taux_penalite_quotidien', models.DecimalField(decimal_places=2, help_text='Taux de pénalité par jour de retard en pourcentage', max_digits=5, validators=[django.core.validators.MinValueValidator(Decimal('0.00')), django.core.validators.MaxValueValidator(Decimal('10.00'))])),
                ('montant_mensualite', models.DecimalField(decimal_places=2, help_text='Montant de la mensualité calculée', max_digits=12)),
                ('date_premiere_echeance', models.DateField(help_text='Date de la première échéance')),
                ('date_creation', models.DateTimeField(auto_now_add=True, help_text='Date de définition des conditions')),
                ('demande', models.OneToOneField(help_text='Demande de prêt associée', on_delete=django.db.models.deletion.CASCADE, related_name='conditions_remboursement', to='loans.loanapplication')),
                ('superviseur_definisseur', models.ForeignKey(help_text='Superviseur ayant défini les conditions', on_delete=django.db.models.deletion.CASCADE, related_name='conditions_definies', to='accounts.superviseursfd')),
            ],
            options={
                'verbose_name': 'Conditions de Remboursement',
                'verbose_name_plural': 'Conditions de Remboursement',
                'db_table': 'loans_terms',
            },
        ),
        migrations.CreateModel(
            name='RepaymentSchedule',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numero_echeance', models.PositiveIntegerField(help_text="Numéro de l'échéance (1, 2, 3...)")),
                ('date_echeance', models.DateField(help_text="Date d'échéance de cette mensualité")),
                ('montant_mensualite', models.DecimalField(decimal_places=2, help_text='Montant de la mensualité normale', max_digits=12)),
                ('montant_capital', models.DecimalField(decimal_places=2, help_text='Part capital de cette échéance', max_digits=12)),
                ('montant_interet', models.DecimalField(decimal_places=2, help_text='Part intérêt de cette échéance', max_digits=12)),
                ('solde_restant', models.DecimalField(decimal_places=2, help_text='Solde restant après cette échéance', max_digits=12)),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('paye', 'Payé'), ('en_retard', 'En retard'), ('paye_avec_penalites', 'Payé avec pénalités')], default='en_attente', help_text="Statut de l'échéance", max_length=20)),
                ('date_paiement', models.DateTimeField(blank=True, help_text='Date effective du paiement', null=True)),
                ('montant_penalites', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant des pénalités de retard', max_digits=12)),
                ('loan', models.ForeignKey(help_text='Prêt associé', on_delete=django.db.models.deletion.CASCADE, related_name='echeances', to='loans.loan')),
            ],
            options={
                'verbose_name': 'Échéance de Remboursement',
                'verbose_name_plural': 'Échéances de Remboursement',
                'db_table': 'loans_repayment_schedule',
                'ordering': ['loan', 'numero_echeance'],
            },
        ),
        migrations.CreateModel(
            name='Payment',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Identifiant unique du paiement', primary_key=True, serialize=False)),
                ('montant_paye', models.DecimalField(decimal_places=2, help_text='Montant effectivement payé', max_digits=12, validators=[django.core.validators.MinValueValidator(Decimal('0.01'))])),
                ('montant_mensualite', models.DecimalField(decimal_places=2, help_text='Montant de la mensualité normale', max_digits=12)),
                ('montant_penalites', models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Montant des pénalités incluses', max_digits=12)),
                ('statut', models.CharField(choices=[('en_cours', 'En cours'), ('confirme', 'Confirmé'), ('echec', 'Échec'), ('rembourse', 'Remboursé')], default='en_cours', help_text='Statut du paiement', max_length=15)),
                ('date_paiement', models.DateTimeField(auto_now_add=True, help_text="Date d'initiation du paiement")),
                ('date_confirmation', models.DateTimeField(blank=True, help_text='Date de confirmation du paiement', null=True)),
                ('reference_externe', models.CharField(help_text='Référence externe de la transaction', max_length=100, unique=True)),
                ('loan', models.ForeignKey(help_text='Prêt concerné par le paiement', on_delete=django.db.models.deletion.CASCADE, related_name='paiements', to='loans.loan')),
                ('transaction_kkiapay', models.ForeignKey(blank=True, help_text='Transaction Mobile Money associée', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='remboursements_prets', to='payments.kkiapaytransaction')),
                ('echeance', models.ForeignKey(help_text='Échéance remboursée', on_delete=django.db.models.deletion.CASCADE, related_name='paiements', to='loans.repaymentschedule')),
            ],
            options={
                'verbose_name': 'Paiement de Remboursement',
                'verbose_name_plural': 'Paiements de Remboursement',
                'db_table': 'loans_payment',
                'ordering': ['-date_paiement'],
            },
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['client', 'statut'], name='loans_appli_client__ad5cf9_idx'),
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['date_soumission'], name='loans_appli_date_so_e515f4_idx'),
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['superviseur_examinateur'], name='loans_appli_supervi_c7c544_idx'),
        ),
        migrations.AddIndex(
            model_name='loanapplication',
            index=models.Index(fields=['admin_validateur'], name='loans_appli_admin_v_9a37e7_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['client', 'statut'], name='loans_loan_client__87b2eb_idx'),
        ),
        migrations.AddIndex(
            model_name='loan',
            index=models.Index(fields=['date_creation'], name='loans_loan_date_cr_904e5e_idx'),
        ),
        migrations.AddIndex(
            model_name='repaymentschedule',
            index=models.Index(fields=['loan', 'date_echeance'], name='loans_repay_loan_id_935765_idx'),
        ),
        migrations.AddIndex(
            model_name='repaymentschedule',
            index=models.Index(fields=['date_echeance', 'statut'], name='loans_repay_date_ec_6e5e8f_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='repaymentschedule',
            unique_together={('loan', 'numero_echeance')},
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['loan', 'statut'], name='loans_payme_loan_id_4efa95_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['date_paiement'], name='loans_payme_date_pa_1292ce_idx'),
        ),
        migrations.AddIndex(
            model_name='payment',
            index=models.Index(fields=['reference_externe'], name='loans_payme_referen_b98732_idx'),
        ),
    ]
