"""
VUES ET ENDPOINTS REST POUR LE MODULE PR√äTS - TONTIFLEX

Ce module contient tous les ViewSets et endpoints pour:
1. Gestion des demandes de pr√™t (CRUD + workflow)
2. Workflow Superviseur ‚Üí Admin obligatoire
3. Conditions de remboursement et calculs
4. Gestion des pr√™ts accord√©s et d√©caissements
5. √âch√©ances et remboursements
6. Rapports et statistiques

Respect strict des permissions par r√¥le et des r√®gles m√©tier
"""

import logging
from decimal import Decimal
from datetime import datetime, timedelta
from django.utils import timezone
from django.db import transaction
from django.core.exceptions import ValidationError
from django.http import Http404, FileResponse
from django.shortcuts import get_object_or_404
from rest_framework import viewsets, status, permissions
from rest_framework.decorators import action
from rest_framework.response import Response
from rest_framework.parsers import MultiPartParser, FormParser, JSONParser
from drf_spectacular.utils import extend_schema, extend_schema_view, OpenApiParameter, OpenApiResponse, OpenApiExample
from drf_spectacular.types import OpenApiTypes

from .models import LoanApplication, LoanTerms, Loan, RepaymentSchedule, Payment
from .serializers import (
    LoanApplicationSerializer, LoanTermsSerializer, LoanSerializer,
    RepaymentScheduleSerializer, PaymentSerializer,
    EligibilityCheckSerializer, EligibilityResponseSerializer,
    ExaminerDemandeSerializer, DefinirConditionsSerializer,
    TransfererAdminSerializer, ValidationAdminSerializer,
    MarquerDecaisseSerializer, EffectuerRemboursementSerializer,
    ScoreFiabiliteSerializer, CalendrierRemboursementSerializer,
    LoanApplicationResponseSerializer, StatistiquesPretsSerializer,
    RapportDemandeSerializer, ExportDemandesSerializer
)
from .permissions import (
    IsClientOwner, IsSuperviseurSFD, IsAdminSFD, IsAdminPlateforme,
    CanExamineLoanApplication, CanDefineTerms, CanTransferToAdmin,
    CanFinalApprove, CanMarkDisbursed, CanMakeRepayment, CanViewCreditScore,
    LoanApplicationPermission, LoanPermission
)
from .utils import (
    calculer_score_fiabilite_client, analyser_capacite_remboursement,
    generer_rapport_demande, calculer_statistiques_prets,
    calculer_tableau_amortissement
)
from .tasks import (
    envoyer_notification_demande_soumise, envoyer_notification_demande_traitee,
    calculer_penalites_quotidiennes, envoyer_rappels_echeances
)

logger = logging.getLogger(__name__)


# =============================================================================
# DEMANDES DE PR√äT
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des demandes de pr√™t",
        description="""
        R√©cup√®re la liste des demandes de pr√™t selon les permissions utilisateur.
        
        Processus de demande de pr√™t TontiFlex:
        1. Client soumet une demande avec documents justificatifs PDF
        2. V√©rification automatique d'√©ligibilit√© (compte √©pargne > 3 mois)
        3. Calcul du score de fiabilit√© bas√© sur l'historique
        4. Traitement par Superviseur SFD (d√©finir conditions)
        5. Transfert OBLIGATOIRE vers Admin SFD pour validation finale
        6. D√©caissement en personne apr√®s accord final
        7. G√©n√©ration du calendrier de remboursement
        8. Suivi des √©ch√©ances et remboursements Mobile Money
        
        Statuts de demande:
        soumis: Demande cr√©√©e par le client, en attente de traitement superviseur
        examine_superviseur: En cours d'examen par le superviseur SFD
        transfere_admin: Conditions d√©finies, transf√©r√©e vers admin pour validation
        accorde: Valid√©e par admin SFD, pr√™t cr√©√© et pr√™t au d√©caissement
        rejete: Refus√©e soit par superviseur soit par admin (avec motif)
        
        √âligibilit√© requise:
        Compte √©pargne actif depuis au moins 3 mois
        Aucun pr√™t en cours (un seul pr√™t autoris√© √† la fois)
        Documents justificatifs valides (revenus, garanties)
        Score de fiabilit√© minimum calcul√© automatiquement
        """,
        responses={200: LoanApplicationSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er une demande de pr√™t",
        description="""
        Permet √† un client de cr√©er une nouvelle demande de pr√™t.
        
        Conditions d'√©ligibilit√© automatiquement v√©rifi√©es:
        Client avec compte √©pargne actif depuis au moins 3 mois
        Aucun pr√™t en cours ou impay√©
        Documents d'identit√© et justificatifs valides
        Capacit√© de remboursement d√©montr√©e
        
        Documents requis (PDF uniquement):
        Justificatifs de revenus (bulletins salaire, relev√©s activit√©)
        Garanties ou avals (si montant > seuil SFD)
        Plan d'utilisation des fonds d√©taill√©
        R√©f√©rences commerciales ou professionnelles
        
        Calculs automatiques:
        Score de fiabilit√© bas√© sur historique √©pargne et tontines
        Capacit√© de remboursement analys√©e
        Recommandations de montant et dur√©e
        
        Workflow apr√®s cr√©ation:
        1. Statut initial: soumis
        2. Notification automatique au superviseur SFD
        3. Attente d'examen et d√©finition des conditions
        """,
        request=LoanApplicationSerializer,
        responses={
            201: LoanApplicationSerializer,
            400: OpenApiResponse(description="Donn√©es invalides ou client non √©ligible"),
            409: OpenApiResponse(description="Client a d√©j√† un pr√™t en cours")
        },
        examples=[
            OpenApiExample(
                "Demande de pr√™t commerce",
                value={
                    "montant_souhaite": 500000,
                    "duree_souhaitee_mois": 12,
                    "motif": "Extension commerce de d√©tail",
                    "justificatifs_revenus": "base64_encoded_pdf_data",
                    "plan_utilisation": "Achat stock marchandises et r√©novation boutique",
                    "garanties_proposees": "Caution solidaire + nantissement mat√©riel",
                    "revenus_mensuels_declares": 200000,
                    "charges_mensuelles": 80000
                }
            ),
            OpenApiExample(
                "Demande de pr√™t agriculture",
                value={
                    "montant_souhaite": 300000,
                    "duree_souhaitee_mois": 18,
                    "motif": "Campagne agricole saison s√®che",
                    "justificatifs_revenus": "base64_encoded_pdf_data",
                    "plan_utilisation": "Achat semences, engrais et location tracteur",
                    "garanties_proposees": "Hypoth√®que sur terrain agricole",
                    "revenus_mensuels_declares": 150000,
                    "charges_mensuelles": 60000
                }
            )
        ]
    ),
    retrieve=extend_schema(
        summary="D√©tails d'une demande de pr√™t",
        description="""
        R√©cup√®re les informations d√©taill√©es d'une demande de pr√™t sp√©cifique.
        
        Informations affich√©es:
        Donn√©es compl√®tes de la demande du client
        Score de fiabilit√© calcul√© avec d√©tails
        Historique du traitement (superviseur ‚Üí admin)
        Conditions de remboursement si d√©finies
        Documents joints et justificatifs
        Commentaires et d√©cisions des agents
        
        Permissions:
        Client: Peut voir uniquement ses propres demandes
        Superviseur SFD: Demandes des clients de sa SFD
        Admin SFD: Demandes transf√©r√©es de sa SFD
        Admin Plateforme: Toutes les demandes
        """
    ),
    update=extend_schema(
        summary="Modifier une demande de pr√™t",
        description="""
        Met √† jour une demande de pr√™t existante.
        
        Modifications autoris√©es:
        Client: Peut modifier uniquement les demandes en statut 'soumis'
        Superviseur: Peut modifier statut et ajouter commentaires
        Admin SFD: Peut modifier statut final et conditions
        
        Champs modifiables par le client:
        Montant souhait√© et dur√©e
        Motif et plan d'utilisation
        Documents justificatifs (remplacement)
        Garanties propos√©es
        
        Restrictions:
        Aucune modification apr√®s accord final
        Certains champs verrouill√©s selon le statut
        Tra√ßabilit√© compl√®te des modifications
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'une demande",
        description="Met √† jour partiellement une demande de pr√™t (uniquement les champs fournis)."
    ),
    destroy=extend_schema(
        summary="Supprimer une demande de pr√™t",
        description="""
        Supprime d√©finitivement une demande de pr√™t.
        
        Conditions de suppression:
        Demande en statut 'soumis' uniquement
        Seul le client demandeur peut supprimer
        Admins peuvent supprimer demandes non accord√©es
        
        Effets: Suppression compl√®te, pas de r√©cup√©ration possible
        """
    )
)
@extend_schema(tags=["üí∞ Demandes de Pr√™t"])
class LoanApplicationViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour la gestion des demandes de pr√™t.
    
    Permissions:
    - Client: Cr√©er et voir ses propres demandes
    - Superviseur SFD: Voir et traiter les demandes de ses clients
    - Admin SFD: Voir et approuver les demandes transf√©r√©es
    - Admin Plateforme: Acc√®s complet
    """
    serializer_class = LoanApplicationSerializer
    parser_classes = [MultiPartParser, FormParser, JSONParser]
    
    def get_queryset(self):
        user = self.request.user
        
        if user.type_utilisateur == 'client':
            # Client ne voit que ses propres demandes
            return LoanApplication.objects.filter(client=user).order_by('-date_soumission')
        
        elif user.type_utilisateur == 'superviseur_sfd':
            # Superviseur voit les demandes des clients de sa SFD
            return LoanApplication.objects.filter(
                client__compte_epargne__agent_validateur__sfd=user.sfd
            ).order_by('-date_soumission')
        
        elif user.type_utilisateur == 'admin_sfd':
            # Admin SFD voit les demandes transf√©r√©es de sa SFD
            return LoanApplication.objects.filter(
                client__compte_epargne__agent_validateur__sfd=user.sfd
            ).order_by('-date_soumission')
        
        elif user.type_utilisateur == 'admin_plateforme':
            # Admin plateforme voit tout
            return LoanApplication.objects.all().order_by('-date_soumission')
        
        return LoanApplication.objects.none()
    
    def get_serializer_class(self):
        if self.action == 'create':
            return LoanApplicationSerializer
        elif self.action in ['retrieve', 'list']:
            return LoanApplicationSerializer
        return self.serializer_class
    
    def get_permissions(self):
        if self.action == 'create':
            return [permissions.IsAuthenticated()]
        elif self.action in ['retrieve', 'list']:
            return [LoanApplicationPermission()]
        elif self.action in ['process_application', 'transfer_to_admin']:
            return [LoanApplicationPermission()]
        return [permissions.IsAuthenticated()]
    
    def perform_create(self, serializer):
        """Cr√©er une nouvelle demande de pr√™t."""
        try:
            # V√©rifier l'√©ligibilit√© automatiquement
            client = self.request.user
            
            # V√©rifier que le client a un compte √©pargne actif > 3 mois
            if not hasattr(client, 'compte_epargne') or client.compte_epargne.statut != 'actif':
                raise ValidationError("Vous devez avoir un compte √©pargne actif pour demander un pr√™t.")
            
            anciennete_jours = (timezone.now() - client.compte_epargne.date_activation).days
            if anciennete_jours < 90:  # 3 mois
                raise ValidationError("Votre compte √©pargne doit √™tre actif depuis au moins 3 mois.")
            
            # V√©rifier qu'il n'y a pas de pr√™t en cours
            pret_en_cours = Loan.objects.filter(
                client=client,
                statut__in=['accorde', 'decaisse', 'en_remboursement']
            ).exists()
            
            if pret_en_cours:
                raise ValidationError("Vous avez d√©j√† un pr√™t en cours. Un seul pr√™t est autoris√© √† la fois.")
            
            # Calculer le score de fiabilit√©
            score_info = calculer_score_fiabilite_client(client)
            
            # Sauvegarder la demande
            demande = serializer.save(
                client=client,
                score_fiabilite=Decimal(str(score_info['score'])),
                details_score=score_info,
                statut='soumis'
            )
            
            # Envoyer notification asynchrone
            envoyer_notification_demande_soumise.delay(demande.id)
            
            logger.info(f"Nouvelle demande de pr√™t cr√©√©e: {demande.id} pour client {client.id}")
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation demande de pr√™t: {e}")
            raise ValidationError(str(e))
    
    @extend_schema(
        summary="Traiter une demande de pr√™t (Superviseur SFD)",
        description="""
        Permet √† un superviseur SFD d'examiner et traiter une demande de pr√™t.
        
        **R√¥le du Superviseur SFD**:
        - Analyse de la demande et des documents fournis
        - √âvaluation de la capacit√© de remboursement du client
        - D√©finition des conditions de pr√™t (montant, taux, dur√©e)
        - D√©cision d'approbation ou de rejet avec justification
        - Transfert OBLIGATOIRE vers Admin SFD si approuv√©
        
        **Processus d'examen**:
        1. V√©rification des documents justificatifs
        2. Analyse du score de fiabilit√© calcul√©
        3. √âvaluation des garanties propos√©es
        4. D√©finition des conditions personnalis√©es
        5. Transfert automatique vers admin pour validation finale
        
        **Actions possibles**:
        - Approuver: D√©finir conditions et transf√©rer √† l'admin
        - Rejeter: Refus d√©finitif avec motif d√©taill√©
        - Demander compl√©ments: Retour au client pour documents additionnels
        
        **Conditions requises**:
        - Statut de la demande: 'soumis'
        - Utilisateur: Superviseur SFD de la m√™me SFD que le client
        - Documents justificatifs complets et valides
        
        **Workflow apr√®s traitement**:
        Si approuv√©: Statut ‚Üí 'transfere_admin', notification √† l'admin SFD
        Si rejet√©: Statut ‚Üí 'rejete', notification au client avec motif
        """,
        request=ExaminerDemandeSerializer,
        responses={
            200: LoanApplicationResponseSerializer,
            400: OpenApiResponse(description="Erreur de validation ou demande non traitable"),
            403: OpenApiResponse(description="Permissions insuffisantes"),
            404: OpenApiResponse(description="Demande introuvable")
        },
        examples=[
            OpenApiExample(
                "Approbation avec conditions",
                value={
                    "action": "approuver",
                    "commentaire": "Dossier complet, client fiable avec bon historique √©pargne",
                    "montant_accorde": 400000,
                    "taux_interet": 12.5,
                    "duree_mois": 12,
                    "conditions_particulieres": "Remboursement anticip√© autoris√© sans p√©nalit√©"
                }
            ),
            OpenApiExample(
                "Rejet motiv√©",
                value={
                    "action": "rejeter",
                    "commentaire": "Capacit√© de remboursement insuffisante, revenus irr√©guliers",
                    "recommandations": "D√©velopper activit√© sur 6 mois puis renouveler demande"
                }
            )
        ]
    )
    @action(detail=True, methods=['post'], url_path='process-application')
    def process_application(self, request, pk=None):
        """Traiter une demande de pr√™t (Superviseur SFD uniquement)."""
        demande = self.get_object()
        action = request.data.get('action')
        
        # V√©rifications
        if demande.statut != 'soumis':
            return Response(
                {'erreur': 'Cette demande ne peut plus √™tre trait√©e'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        if request.user.type_utilisateur != 'superviseur_sfd':
            return Response(
                {'erreur': 'Seul un superviseur SFD peut traiter les demandes'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        try:
            with transaction.atomic():
                if action == 'rejeter':
                    # Rejet direct par le superviseur
                    demande.statut = 'rejete'
                    demande.commentaire_superviseur = request.data.get('commentaire', '')
                    demande.date_traitement_superviseur = timezone.now()
                    demande.superviseur_traitant = request.user
                    demande.save()
                    
                    # Notification
                    envoyer_notification_decision_pret.delay(
                        demande.id, 'rejete', demande.commentaire_superviseur
                    )
                    
                    return Response({
                        'message': 'Demande rejet√©e avec succ√®s',
                        'demande': LoanApplicationDetailSerializer(demande).data
                    })
                
                elif action == 'approuver':
                    # Traitement par le superviseur - Cr√©ation des conditions
                    montant_accorde = request.data.get('montant_accorde')
                    taux_interet = request.data.get('taux_interet')
                    duree_mois = request.data.get('duree_mois')
                    
                    if not all([montant_accorde, taux_interet, duree_mois]):
                        return Response(
                            {'erreur': 'Montant accord√©, taux d\'int√©r√™t et dur√©e requis'},
                            status=status.HTTP_400_BAD_REQUEST
                        )
                    
                    # Validation des montants
                    montant_accorde = Decimal(str(montant_accorde))
                    if montant_accorde > demande.montant_souhaite:
                        return Response(
                            {'erreur': 'Le montant accord√© ne peut pas d√©passer le montant demand√©'},
                            status=status.HTTP_400_BAD_REQUEST
                        )
                    
                    # Cr√©er les conditions de remboursement
                    conditions = LoanTerms.objects.create(
                        demande=demande,
                        montant_accorde=montant_accorde,
                        taux_interet_annuel=Decimal(str(taux_interet)),
                        duree_mois=int(duree_mois),
                        definies_par=request.user
                    )
                    
                    # Mettre √† jour la demande
                    demande.statut = 'transfere_admin'  # OBLIGATOIRE: Transfert vers admin
                    demande.commentaire_superviseur = request.data.get('commentaire', '')
                    demande.date_traitement_superviseur = timezone.now()
                    demande.superviseur_traitant = request.user
                    demande.save()
                    
                    logger.info(f"Demande {demande.id} trait√©e par superviseur et transf√©r√©e √† l'admin")
                    
                    return Response({
                        'message': 'Demande trait√©e et transf√©r√©e √† l\'administrateur pour validation finale',
                        'demande': LoanApplicationDetailSerializer(demande).data,
                        'conditions': LoanTermsSerializer(conditions).data
                    })
                
                else:
                    return Response(
                        {'erreur': 'Action non reconnue'},
                        status=status.HTTP_400_BAD_REQUEST
                    )
        
        except Exception as e:
            logger.error(f"Erreur traitement demande {pk}: {e}")
            return Response(
                {'erreur': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @extend_schema(
        summary="Validation finale Admin SFD",
        description="""
        Permet √† un Admin SFD de valider d√©finitivement une demande de pr√™t.
        
        **R√¥le de l'Admin SFD**:
        - Validation finale apr√®s examen superviseur obligatoire
        - V√©rification de la conformit√© r√©glementaire (UEMOA/BCEAO)
        - Autorisation de d√©caissement selon les fonds SFD disponibles
        - Cr√©ation du contrat de pr√™t et du calendrier de remboursement
        - Signature √©lectronique et archivage s√©curis√©
        
        **Processus de validation**:
        1. Revue des conditions d√©finies par le superviseur
        2. V√©rification de la disponibilit√© des fonds SFD
        3. Contr√¥le de conformit√© r√©glementaire
        4. D√©cision finale de validation ou rejet
        5. Cr√©ation automatique du pr√™t si valid√©
        
        **Actions possibles**:
        - Valider: Cr√©ation du pr√™t et calendrier de remboursement
        - Rejeter: Refus final avec motif r√©glementaire ou technique
        - Modifier conditions: Ajustement des conditions superviseur
        
        **Conditions requises**:
        - Statut de la demande: 'transfere_admin'
        - Utilisateur: Admin SFD de la m√™me SFD
        - Conditions de remboursement pr√©alablement d√©finies
        - Fonds SFD suffisants pour le d√©caissement
        
        **Effets de la validation**:
        Si valid√©: Cr√©ation d'un objet Loan, statut ‚Üí 'accorde'
        Si rejet√©: Statut ‚Üí 'rejete', notification avec motif
        G√©n√©ration automatique du contrat et calendrier
        """,
        request=ValidationAdminSerializer,
        responses={
            200: LoanApplicationResponseSerializer,
            400: OpenApiResponse(description="Erreur de validation ou fonds insuffisants"),
            403: OpenApiResponse(description="Permissions insuffisantes"),
            404: OpenApiResponse(description="Demande non transf√©r√©e")
        },
        examples=[
            OpenApiExample(
                "Validation finale",
                value={
                    "action": "valider",
                    "commentaire": "Dossier conforme, fonds disponibles, contrat g√©n√©r√©",
                    "ajustements_conditions": {
                        "taux_interet": 12.0,
                        "clauses_particulieres": "Assurance d√©c√®s incluse"
                    }
                }
            ),
            OpenApiExample(
                "Rejet admin",
                value={
                    "action": "rejeter", 
                    "commentaire": "Fonds SFD insuffisants pour ce montant en ce moment",
                    "recommandations": "Renouveler la demande dans 2 mois"
                }
            )
        ]
    )
    @action(detail=True, methods=['post'], url_path='admin-decision')
    def admin_decision(self, request, pk=None):
        """Validation finale par l'Admin SFD."""
        demande = self.get_object()
        action = request.data.get('action')
        
        # V√©rifications
        if demande.statut != 'transfere_admin':
            return Response(
                {'erreur': 'Cette demande n\'est pas en attente de validation admin'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        if request.user.type_utilisateur != 'admin_sfd':
            return Response(
                {'erreur': 'Seul un admin SFD peut valider les demandes'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        try:
            with transaction.atomic():
                if action == 'rejeter':
                    # Rejet par l'admin
                    demande.statut = 'rejete'
                    demande.commentaire_admin = request.data.get('commentaire', '')
                    demande.date_traitement_admin = timezone.now()
                    demande.admin_validateur = request.user
                    demande.save()
                    
                    # Notification
                    envoyer_notification_decision_pret.delay(
                        demande.id, 'rejete', demande.commentaire_admin
                    )
                    
                    return Response({
                        'message': 'Demande rejet√©e par l\'administrateur',
                        'demande': LoanApplicationDetailSerializer(demande).data
                    })
                
                elif action == 'valider':
                    # Validation finale - Cr√©ation du pr√™t
                    conditions = demande.conditions_remboursement
                    if not conditions:
                        return Response(
                            {'erreur': 'Aucune condition de remboursement d√©finie'},
                            status=status.HTTP_400_BAD_REQUEST
                        )
                    
                    # Cr√©er le pr√™t
                    pret = Loan.objects.create(
                        demande=demande,
                        client=demande.client,
                        montant_accorde=conditions.montant_accorde,
                        taux_interet_annuel=conditions.taux_interet_annuel,
                        duree_mois=conditions.duree_mois,
                        statut='accorde',
                        admin_validateur=request.user
                    )
                    
                    # Mettre √† jour la demande
                    demande.statut = 'accorde'
                    demande.commentaire_admin = request.data.get('commentaire', '')
                    demande.date_traitement_admin = timezone.now()
                    demande.admin_validateur = request.user
                    demande.save()
                    
                    # Notification
                    envoyer_notification_decision_pret.delay(
                        demande.id, 'accorde', demande.commentaire_admin
                    )
                    
                    logger.info(f"Pr√™t {pret.id} cr√©√© pour demande {demande.id}")
                    
                    return Response({
                        'message': 'Pr√™t accord√© avec succ√®s',
                        'demande': LoanApplicationDetailSerializer(demande).data,
                        'pret': LoanSerializer(pret).data
                    })
                
                else:
                    return Response(
                        {'erreur': 'Action non reconnue'},
                        status=status.HTTP_400_BAD_REQUEST
                    )
        
        except Exception as e:
            logger.error(f"Erreur validation admin demande {pk}: {e}")
            return Response(
                {'erreur': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @extend_schema(
        summary="Rapport d'analyse d√©taill√©",
        description="""
        G√©n√®re un rapport d'analyse complet pour une demande de pr√™t.
        
        **Contenu du rapport**:
        - Profil complet du client et historique financier
        - Analyse d√©taill√©e du score de fiabilit√© calcul√©
        - √âvaluation de la capacit√© de remboursement
        - Recommandations de conditions optimales
        - Analyse des risques et garanties
        - Conformit√© r√©glementaire UEMOA/BCEAO
        
        **Calculs automatiques inclus**:
        - Score de fiabilit√© bas√© sur √©pargne et tontines
        - Ratio d'endettement et capacit√© de remboursement
        - Simulation de tableaux d'amortissement
        - Analyse de sensibilit√© aux variations de taux
        - √âvaluation des garanties propos√©es
        
        **Sections du rapport**:
        1. Synth√®se ex√©cutive avec recommandation
        2. Profil client et historique TontiFlex
        3. Analyse financi√®re et capacit√© de paiement
        4. √âvaluation des risques et mitigation
        5. Recommandations de conditions
        6. Conformit√© r√©glementaire et documentation
        
        **Utilisation**:
        - Aide √† la d√©cision pour superviseurs et admins
        - Documentation pour dossier de pr√™t
        - Justification des conditions accord√©es
        - Tra√ßabilit√© des analyses effectu√©es
        """,
        responses={
            200: RapportDemandeSerializer,
            403: OpenApiResponse(description="Non autoris√© pour cette demande"),
            404: OpenApiResponse(description="Demande non trouv√©e"),
            500: OpenApiResponse(description="Erreur g√©n√©ration rapport")
        }
    )
    @action(detail=True, methods=['get'], url_path='rapport-analyse')
    def rapport_analyse(self, request, pk=None):
        """G√©n√®re un rapport d'analyse d√©taill√© de la demande."""
        demande = self.get_object()
        
        try:
            rapport = generer_rapport_demande(demande)
            return Response(rapport)
        except Exception as e:
            logger.error(f"Erreur g√©n√©ration rapport demande {pk}: {e}")
            return Response(
                {'erreur': 'Erreur lors de la g√©n√©ration du rapport'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# =============================================================================
# CONDITIONS DE REMBOURSEMENT
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des conditions de remboursement",
        description="""
        Affiche la liste des conditions de remboursement d√©finies pour les demandes de pr√™t.
        
        Les conditions de remboursement TontiFlex:
        D√©finies exclusivement par les Superviseurs SFD apr√®s examen
        Incluent montant accord√©, taux d'int√©r√™t, dur√©e et clauses particuli√®res
        Personnalis√©es selon le profil de risque du client
        Conformes aux r√©glementations UEMOA et politiques SFD
        
        √âl√©ments des conditions:
        Montant accord√© (peut √™tre inf√©rieur au montant demand√©)
        Taux d'int√©r√™t annuel selon grille SFD et profil client
        Dur√©e de remboursement en mois (3 √† 36 mois maximum)
        Type de remboursement (mensuel, bimensuel, saisonnier)
        Garanties requises et modalit√©s de recouvrement
        Clauses particuli√®res (assurance, remboursement anticip√©)
        
        Calculs automatiques:
        Mensualit√© calcul√©e selon tableau d'amortissement
        Co√ªt total du cr√©dit et taux effectif global (TEG)
        Calendrier d√©taill√© des √©ch√©ances
        Simulations de remboursement anticip√©
        """,
        responses={200: LoanTermsSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er des conditions de remboursement",
        description="""
        Permet de cr√©er de nouvelles conditions de remboursement pour une demande.
        
        Processus de cr√©ation:
        R√©serv√© aux Superviseurs SFD pour leurs clients
        Bas√© sur l'analyse approfondie de la demande
        Respect des grilles de taux et politiques SFD
        Validation automatique de coh√©rence
        
        Donn√©es requises:
        R√©f√©rence √† la demande de pr√™t concern√©e
        Montant accord√© (dans les limites autoris√©es)
        Taux d'int√©r√™t conforme √† la grille SFD
        Dur√©e adapt√©e au profil et √† l'activit√©
        Garanties et conditions particuli√®res
        """,
        request=LoanTermsSerializer,
        responses={
            201: LoanTermsSerializer,
            400: OpenApiResponse(description="Conditions invalides ou hors limites"),
            403: OpenApiResponse(description="Non autoris√© √† d√©finir les conditions")
        }
    ),
    retrieve=extend_schema(
        summary="D√©tails des conditions de remboursement",
        description="R√©cup√®re les informations d√©taill√©es des conditions avec simulation d'amortissement."
    ),
    update=extend_schema(
        summary="Modifier les conditions de remboursement",
        description="""
        Met √† jour les conditions de remboursement existantes.
        
        Modifications autoris√©es:
        Superviseur: Peut modifier avant transfert admin
        Admin SFD: Peut ajuster avant validation finale
        Restrictions selon le statut de la demande
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle des conditions",
        description="Met √† jour partiellement les conditions de remboursement."
    ),
    destroy=extend_schema(
        summary="Supprimer les conditions",
        description="Supprime les conditions (uniquement si demande non encore valid√©e)."
    )
)
@extend_schema(tags=["üìä Conditions de Remboursement"])
class LoanTermsViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour la gestion des conditions de remboursement.
    """
    serializer_class = LoanTermsSerializer
    permission_classes = [CanDefineTerms]
    
    def get_queryset(self):
        user = self.request.user
        
        if user.type_utilisateur == 'superviseur_sfd':
            return LoanTerms.objects.filter(
                demande__client__compte_epargne__agent_validateur__sfd=user.sfd
            )
        elif user.type_utilisateur in ['admin_sfd', 'admin_plateforme']:
            if user.type_utilisateur == 'admin_sfd':
                return LoanTerms.objects.filter(
                    demande__client__compte_epargne__agent_validateur__sfd=user.sfd
                )
            else:
                return LoanTerms.objects.all()
        
        return LoanTerms.objects.none()
    
    @extend_schema(
        summary="Simuler un tableau d'amortissement",
        description="""
        G√©n√®re une simulation de tableau d'amortissement pour des conditions donn√©es.
        
        **Outil de simulation TontiFlex**:
        - Calcul pr√©cis des mensualit√©s selon m√©thode actuarielle
        - D√©composition capital/int√©r√™ts pour chaque √©ch√©ance
        - Solde restant d√ª apr√®s chaque paiement
        - Co√ªt total du cr√©dit et TEG (Taux Effectif Global)
        
        **Param√®tres de simulation**:
        - Montant du pr√™t (capital initial)
        - Taux d'int√©r√™t annuel (en pourcentage)
        - Dur√©e de remboursement (en mois)
        - Date de premi√®re √©ch√©ance (optionnelle)
        
        **Informations calcul√©es**:
        - Mensualit√© fixe pour remboursement constant
        - R√©partition capital/int√©r√™ts par √©ch√©ance
        - Capital restant d√ª √† chaque p√©riode
        - Somme totale rembours√©e sur la dur√©e
        - Co√ªt total des int√©r√™ts
        
        **Cas d'usage**:
        - Aide √† la d√©finition des conditions par les superviseurs
        - Pr√©sentation au client des modalit√©s de remboursement
        - Validation de la capacit√© de paiement
        - Comparaison de diff√©rents sc√©narios
        
        **Exemple de calcul**:
        Pour un pr√™t de 500 000 FCFA √† 12% sur 12 mois:
        Mensualit√©: ~44 424 FCFA
        Total rembours√©: ~533 088 FCFA
        Co√ªt cr√©dit: ~33 088 FCFA
        """,
        parameters=[
            OpenApiParameter(
                'montant', 
                OpenApiTypes.NUMBER, 
                location=OpenApiParameter.QUERY,
                description="Montant du pr√™t en FCFA"
            ),
            OpenApiParameter(
                'taux', 
                OpenApiTypes.NUMBER, 
                location=OpenApiParameter.QUERY,
                description="Taux d'int√©r√™t annuel en pourcentage"
            ),
            OpenApiParameter(
                'duree', 
                OpenApiTypes.INT, 
                location=OpenApiParameter.QUERY,
                description="Dur√©e de remboursement en mois"
            ),
            OpenApiParameter(
                'date_debut', 
                OpenApiTypes.DATE, 
                location=OpenApiParameter.QUERY,
                description="Date de premi√®re √©ch√©ance (optionnel)",
                required=False
            )
        ],
        responses={
            200: CalendrierRemboursementSerializer,
            400: OpenApiResponse(description="Param√®tres de simulation invalides")
        },
        examples=[
            OpenApiExample(
                "Simulation pr√™t commerce",
                description="Simulation pour un pr√™t commercial typique",
                value={
                    "montant": 500000,
                    "taux": 12,
                    "duree": 12
                }
            ),
            OpenApiExample(
                "Simulation pr√™t agriculture",
                description="Simulation adapt√©e aux cycles agricoles",
                value={
                    "montant": 300000,
                    "taux": 10,
                    "duree": 18
                }
            )
        ]
    )
    @action(detail=False, methods=['get'], url_path='simuler-amortissement')
    def simuler_amortissement(self, request):
        """Simule un tableau d'amortissement."""
        try:
            montant = Decimal(request.GET.get('montant', 0))
            taux = Decimal(request.GET.get('taux', 0))
            duree = int(request.GET.get('duree', 0))
            
            if not all([montant > 0, taux >= 0, duree > 0]):
                return Response(
                    {'erreur': 'Param√®tres invalides'},
                    status=status.HTTP_400_BAD_REQUEST
                )
            
            # Date de premi√®re √©ch√©ance (dans 1 mois)
            date_debut = (timezone.now() + timedelta(days=30)).date()
            
            tableau = calculer_tableau_amortissement(montant, taux, duree, date_debut)
            
            return Response({
                'tableau_amortissement': tableau,
                'resume': {
                    'montant_principal': float(montant),
                    'duree_mois': duree,
                    'taux_annuel': float(taux),
                    'mensualite': float(tableau[0]['mensualite']) if tableau else 0,
                    'total_rembourse': sum(float(e['mensualite']) for e in tableau),
                    'cout_interet': sum(float(e['mensualite']) for e in tableau) - float(montant)
                }
            })
            
        except Exception as e:
            logger.error(f"Erreur simulation amortissement: {e}")
            return Response(
                {'erreur': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# =============================================================================
# PR√äTS ACCORD√âS
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des pr√™ts accord√©s",
        description="""
        Affiche la liste des pr√™ts accord√©s selon les permissions utilisateur.
        
        Cycle de vie d'un pr√™t TontiFlex:
        1. Cr√©ation automatique apr√®s validation Admin SFD
        2. Statut 'accorde' - Pr√™t approuv√©, en attente de d√©caissement
        3. Statut 'decaisse' - Fonds remis au client, d√©but remboursement
        4. Statut 'en_remboursement' - Paiements en cours selon calendrier
        5. Statut 'solde' - Pr√™t int√©gralement rembours√©
        6. Statut 'en_defaut' - Retards importants, proc√©dures de recouvrement
        
        Informations sur les pr√™ts:
        Donn√©es compl√®tes du contrat et conditions
        Montant accord√©, taux, dur√©e et calendrier
        Historique des d√©caissements et remboursements
        Solde restant d√ª et prochaines √©ch√©ances
        Statut de conformit√© et alertes de retard
        
        Gestion des risques:
        Suivi automatique des √©ch√©ances et retards
        Calcul des p√©nalit√©s selon r√®glement SFD
        Alertes escalad√©es selon dur√©e de retard
        Proc√©dures de recouvrement gradu√©es
        """,
        responses={200: LoanSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un pr√™t (Interne)",
        description="""
        Cr√©e un nouveau pr√™t (g√©n√©ralement automatique apr√®s validation admin).
        
        Processus de cr√©ation:
        D√©clench√© automatiquement par validation Admin SFD
        G√©n√©ration du contrat et du calendrier d'√©ch√©ances
        Attribution d'un num√©ro de contrat unique
        Initialisation du suivi de remboursement
        """
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un pr√™t",
        description="""
        R√©cup√®re les informations d√©taill√©es d'un pr√™t sp√©cifique.
        
        Informations d√©taill√©es:
        Contrat complet avec toutes les conditions
        Calendrier d'√©ch√©ances avec statuts √† jour
        Historique des paiements effectu√©s
        Solde restant d√ª et prochaines √©ch√©ances
        Calculs des p√©nalit√©s si retards
        Alertes et actions de recouvrement en cours
        """
    ),
    update=extend_schema(
        summary="Modifier un pr√™t",
        description="""
        Met √† jour les informations d'un pr√™t existant.
        
        Modifications autoris√©es:
        Admin SFD: Ajustements exceptionnels des conditions
        Syst√®me: Mise √† jour automatique des statuts et soldes
        Restructuration: Modification calendrier en cas de difficult√©s
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'un pr√™t",
        description="Met √† jour partiellement un pr√™t existant."
    ),
    destroy=extend_schema(
        summary="Supprimer un pr√™t",
        description="Supprime un pr√™t (uniquement si aucun d√©caissement effectu√©)."
    )
)
@extend_schema(tags=["üè¶ Pr√™ts Accord√©s"])
class LoanViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour la gestion des pr√™ts accord√©s.
    """
    serializer_class = LoanSerializer
    
    def get_queryset(self):
        user = self.request.user
        
        if user.type_utilisateur == 'client':
            return Loan.objects.filter(client=user).order_by('-date_creation')
        
        elif user.type_utilisateur in ['agent_sfd', 'superviseur_sfd', 'admin_sfd']:
            return Loan.objects.filter(
                client__compte_epargne__agent_validateur__sfd=user.sfd
            ).order_by('-date_creation')
        
        elif user.type_utilisateur == 'admin_plateforme':
            return Loan.objects.all().order_by('-date_creation')
        
        return Loan.objects.none()
    
    def get_serializer_class(self):
        if self.action in ['retrieve', 'list']:
            return LoanSerializer
        elif self.action == 'decaissement':
            return MarquerDecaisseSerializer
        return self.serializer_class
    
    def get_permissions(self):
        if self.action in ['retrieve', 'list']:
            return [LoanPermission()]
        elif self.action == 'decaissement':
            return [CanMarkDisbursed()]
        return [permissions.IsAuthenticated()]
    
    @extend_schema(
        summary="Marquer un pr√™t comme d√©caiss√©",
        description="""
        Marque un pr√™t comme d√©caiss√© apr√®s remise effective des fonds.
        
        **Processus de d√©caissement TontiFlex**:
        - V√©rification de l'identit√© du b√©n√©ficiaire en personne
        - Signature du contrat de pr√™t d√©finitif
        - Remise des fonds selon mode choisi (esp√®ces/virement/ch√®que)
        - Activation du calendrier de remboursement
        - D√©but du suivi des √©ch√©ances automatique
        
        **Conditions requises**:
        - Pr√™t en statut 'accorde' uniquement
        - Pr√©sence physique du client pour signature
        - V√©rification pi√®ce d'identit√© et documents
        - Fonds SFD disponibles et provisionn√©s
        
        **Modes de d√©caissement**:
        - Esp√®ces: Remise directe au guichet SFD
        - Virement: Transfert vers compte bancaire client
        - Ch√®que: √âmission ch√®que certifi√© SFD
        - Mobile Money: Transfert direct (si autoris√©)
        
        **Effets du d√©caissement**:
        - Statut pr√™t ‚Üí 'decaisse'
        - D√©clenchement calendrier de remboursement
        - Notifications automatiques au client
        - D√©but du suivi des √©ch√©ances
        - Comptabilisation dans les encours SFD
        
        **S√©curit√© et tra√ßabilit√©**:
        - Signature √©lectronique ou scan du contrat
        - Photo de remise des fonds
        - Enregistrement audio/vid√©o si montant important
        - Logs complets de l'op√©ration
        """,
        request=MarquerDecaisseSerializer,
        responses={
            200: LoanSerializer,
            400: OpenApiResponse(description="Pr√™t non d√©caissable ou donn√©es invalides"),
            403: OpenApiResponse(description="Non autoris√© √† effectuer le d√©caissement"),
            404: OpenApiResponse(description="Pr√™t non trouv√©")
        },
        examples=[
            OpenApiExample(
                "D√©caissement en esp√®ces",
                value={
                    "date_decaissement": "2025-06-26",
                    "mode_decaissement": "especes",
                    "commentaire": "D√©caissement effectu√© au guichet Cotonou Centre, client pr√©sent avec CNI",
                    "numero_recu": "DEC2025001234",
                    "agent_decaisseur": "Agent SFD Marie KONE"
                }
            ),
            OpenApiExample(
                "D√©caissement par virement",
                value={
                    "date_decaissement": "2025-06-26", 
                    "mode_decaissement": "virement",
                    "commentaire": "Virement vers compte UBA client confirm√©",
                    "reference_bancaire": "VIR2025987654",
                    "compte_beneficiaire": "BN123456789"
                }
            )
        ]
    )
    @action(detail=True, methods=['post'], url_path='decaissement')
    def decaissement(self, request, pk=None):
        """Marquer un pr√™t comme d√©caiss√©."""
        pret = self.get_object()
        
        if pret.statut != 'accorde':
            return Response(
                {'erreur': 'Ce pr√™t ne peut pas √™tre d√©caiss√©'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            with transaction.atomic():
                # Marquer comme d√©caiss√©
                pret.marquer_decaisse(
                    date_decaissement=request.data.get('date_decaissement'),
                    commentaire=request.data.get('commentaire', ''),
                    mode_decaissement=request.data.get('mode_decaissement', 'especes')
                )
                
                logger.info(f"Pr√™t {pret.id} d√©caiss√© par {request.user.id}")
                
                return Response({
                    'message': 'Pr√™t d√©caiss√© avec succ√®s',
                    'pret': LoanDetailSerializer(pret).data
                })
        
        except Exception as e:
            logger.error(f"Erreur d√©caissement pr√™t {pk}: {e}")
            return Response(
                {'erreur': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @extend_schema(
        summary="Calendrier de remboursement complet",
        description="""
        Obtient le calendrier de remboursement d√©taill√© d'un pr√™t.
        
        **Informations du calendrier**:
        - Toutes les √©ch√©ances pr√©vues avec dates et montants
        - D√©composition capital/int√©r√™ts pour chaque paiement
        - Statut de chaque √©ch√©ance (pr√©vu/pay√©/en retard)
        - Solde restant d√ª apr√®s chaque paiement
        - Calcul des p√©nalit√©s pour retards
        
        **Statuts des √©ch√©ances**:
        - 'prevu': √âch√©ance future non encore due
        - 'en_cours': √âch√©ance due dans les 5 jours
        - 'en_retard': √âch√©ance non pay√©e apr√®s date limite
        - 'paye': √âch√©ance int√©gralement r√©gl√©e
        - 'paye_partiel': Paiement partiel effectu√©
        
        **Calculs automatiques**:
        - Solde restant d√ª actualis√©
        - P√©nalit√©s de retard selon r√®glement SFD
        - Int√©r√™ts de retard calcul√©s quotidiennement
        - Projection des √©ch√©ances futures
        
        **Gestion des retards**:
        - Calcul automatique des p√©nalit√©s
        - R√©√©chelonnement des soldes
        - Alertes escalad√©es selon dur√©e
        - Proc√©dures de recouvrement gradu√©es
        
        **R√©sum√© inclus**:
        - Nombre total d'√©ch√©ances
        - √âch√©ances pay√©es vs restantes
        - Montant total rembours√© vs pr√©vu
        - Retards √©ventuels et p√©nalit√©s
        """,
        responses={
            200: CalendrierRemboursementSerializer,
            403: OpenApiResponse(description="Non autoris√© √† consulter ce calendrier"),
            404: OpenApiResponse(description="Pr√™t non trouv√©")
        }
    )
    @action(detail=True, methods=['get'], url_path='calendrier-remboursement')
    def calendrier_remboursement(self, request, pk=None):
        """Obtient le calendrier de remboursement complet."""
        pret = self.get_object()
        echeances = pret.echeances.all().order_by('numero_echeance')
        
        return Response({
            'pret': LoanSerializer(pret).data,
            'echeances': RepaymentScheduleSerializer(echeances, many=True).data,
            'resume': {
                'total_echeances': echeances.count(),
                'echeances_payees': echeances.filter(statut='paye').count(),
                'echeances_en_retard': echeances.filter(statut='en_retard').count(),
                'montant_total_prevu': sum(e.montant_total for e in echeances),
                'montant_paye': sum(e.montant_paye for e in echeances),
                'montant_restant': sum(e.montant_restant for e in echeances)
            }
        })


# =============================================================================
# √âCH√âANCES DE REMBOURSEMENT
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des √©ch√©ances de remboursement",
        description="""
        Affiche la liste des √©ch√©ances de remboursement selon les permissions.
        
        Gestion des √©ch√©ances TontiFlex:
        G√©n√©r√©es automatiquement lors du d√©caissement du pr√™t
        Calendrier fixe selon conditions d√©finies (mensuel/bimensuel)
        Mise √† jour automatique des statuts et p√©nalit√©s
        Int√©gration avec syst√®me Mobile Money pour remboursements
        
        Statuts d'√©ch√©ance:
        prevu: √âch√©ance future, pas encore due
        en_cours: √âch√©ance due dans les 5 prochains jours
        en_retard: √âch√©ance non pay√©e apr√®s date limite + p√©riode de gr√¢ce
        paye: √âch√©ance int√©gralement r√©gl√©e et confirm√©e
        paye_partiel: Paiement partiel re√ßu, solde restant
        
        Calculs automatiques:
        D√©composition capital/int√©r√™ts selon tableau d'amortissement
        P√©nalit√©s de retard calcul√©es quotidiennement
        Int√©r√™ts de retard compos√©s selon r√®glement SFD
        Mise √† jour temps r√©el des soldes restants
        
        Alertes et notifications:
        Rappels automatiques J-5, J-1 et J+1
        Escalade vers superviseur/admin selon dur√©e de retard
        SMS et emails de rappel personnalis√©s
        Notifications Mobile Money pour faciliter paiement
        """,
        responses={200: RepaymentScheduleSerializer(many=True)}
    ),
    retrieve=extend_schema(
        summary="D√©tails d'une √©ch√©ance",
        description="""
        R√©cup√®re les informations d√©taill√©es d'une √©ch√©ance sp√©cifique.
        
        Informations d√©taill√©es:
        Montant total, d√©composition capital/int√©r√™ts
        Date d'√©ch√©ance et statut actuel
        Historique des paiements partiels si applicable
        Calcul des p√©nalit√©s et int√©r√™ts de retard
        Options de paiement Mobile Money disponibles
        """
    )
)
@extend_schema(tags=["üìÖ √âch√©ances de Remboursement"])
class RepaymentScheduleViewSet(viewsets.ReadOnlyModelViewSet):
    """
    ViewSet pour consulter les √©ch√©ances de remboursement.
    """
    serializer_class = RepaymentScheduleSerializer
    
    def get_queryset(self):
        user = self.request.user
        
        if user.type_utilisateur == 'client':
            return RepaymentSchedule.objects.filter(
                pret__client=user
            ).order_by('date_echeance')
        
        elif user.type_utilisateur in ['agent_sfd', 'superviseur_sfd', 'admin_sfd']:
            return RepaymentSchedule.objects.filter(
                pret__client__compte_epargne__agent_validateur__sfd=user.sfd
            ).order_by('date_echeance')
        
        elif user.type_utilisateur == 'admin_plateforme':
            return RepaymentSchedule.objects.all().order_by('date_echeance')
        
        return RepaymentSchedule.objects.none()
    
    @extend_schema(
        summary="√âch√©ances √† venir",
        description="""
        R√©cup√®re les √©ch√©ances √† venir dans une p√©riode donn√©e.
        
        **Fonctionnalit√© de suivi proactif**:
        - Identification des √©ch√©ances approchant de leur date limite
        - Priorisation par montant et client √† risque
        - Pr√©paration des actions de relance pr√©ventive
        - Planification des liquidit√©s SFD n√©cessaires
        
        **Crit√®res de s√©lection**:
        - √âch√©ances dans la p√©riode sp√©cifi√©e (d√©faut: 30 jours)
        - Statuts 'prevu' et 'en_retard' uniquement
        - Tri par date d'√©ch√©ance croissante
        - Filtrage par SFD selon permissions utilisateur
        
        **Utilisation par r√¥le**:
        - Client: Ses propres √©ch√©ances √† venir pour planification
        - Agent SFD: √âch√©ances clients pour suivi et relance
        - Superviseur: Vision consolid√©e pour pilotage
        - Admin: Planification globale des encaissements
        
        **Informations enrichies**:
        - Profil de risque du client
        - Historique de ponctualit√©
        - Moyens de contact pr√©f√©r√©s
        - Options de paiement Mobile Money
        """,
        parameters=[
            OpenApiParameter(
                'jours', 
                OpenApiTypes.INT, 
                location=OpenApiParameter.QUERY, 
                default=30,
                description="Nombre de jours dans le futur √† consid√©rer"
            )
        ],
        responses={200: RepaymentScheduleSerializer(many=True)}
    )
    @action(detail=False, methods=['get'], url_path='a-venir')
    def a_venir(self, request):
        """Obtient les √©ch√©ances √† venir."""
        jours = int(request.GET.get('jours', 30))
        date_limite = timezone.now().date() + timedelta(days=jours)
        
        echeances = self.get_queryset().filter(
            date_echeance__lte=date_limite,
            statut__in=['prevu', 'en_retard']
        )
        
        return Response(RepaymentScheduleSerializer(echeances, many=True).data)
    
    @extend_schema(
        summary="√âch√©ances en retard",
        description="""
        R√©cup√®re toutes les √©ch√©ances en retard n√©cessitant une action de recouvrement.
        
        **Gestion du recouvrement TontiFlex**:
        - Identification automatique des retards d√®s J+1
        - Classification par gravit√© selon dur√©e de retard
        - Calcul automatique des p√©nalit√©s cumul√©es
        - D√©clenchement des proc√©dures de recouvrement gradu√©es
        
        **Niveaux de retard**:
        - 1-7 jours: Rappel amiable, contact t√©l√©phonique
        - 8-15 jours: Relance formelle, visite client si local
        - 16-30 jours: Mise en demeure, implication superviseur
        - 31+ jours: Proc√©dure de recouvrement, saisie garanties
        
        **Actions automatiques**:
        - Calcul quotidien des p√©nalit√©s selon bar√®me SFD
        - Notifications escalad√©es aux √©quipes de recouvrement
        - Blocage de nouveaux pr√™ts pour client en retard
        - Mise √† jour du score de fiabilit√© client
        
        **Informations de recouvrement**:
        - Dur√©e exacte du retard en jours
        - Montant total d√ª (capital + int√©r√™ts + p√©nalit√©s)
        - Historique des actions de recouvrement
        - Coordonn√©es client et personnes de contact
        - Garanties mobilisables si disponibles
        """,
        responses={200: RepaymentScheduleSerializer(many=True)}
    )
    @action(detail=False, methods=['get'], url_path='en-retard')
    def en_retard(self, request):
        """Obtient les √©ch√©ances en retard."""
        echeances = self.get_queryset().filter(
            statut='en_retard',
            date_echeance__lt=timezone.now().date()
        )
        
        return Response(RepaymentScheduleSerializer(echeances, many=True).data)


# =============================================================================
# PAIEMENTS
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des paiements de remboursement",
        description="""
        Affiche la liste des paiements effectu√©s pour les remboursements de pr√™ts.
        
        Syst√®me de paiement TontiFlex:
        Remboursements exclusivement via Mobile Money (MTN/Moov)
        Traitement temps r√©el avec confirmation automatique
        R√©conciliation automatique avec les √©ch√©ances
        Gestion des paiements partiels et reports
        
        Types de paiement:
        remboursement_normal: Paiement d'√©ch√©ance selon calendrier
        remboursement_anticipe: Paiement avant date d'√©ch√©ance
        remboursement_retard: Paiement apr√®s date limite avec p√©nalit√©s
        remboursement_partiel: Paiement inf√©rieur au montant d√ª
        solde_final: Dernier paiement soldant int√©gralement le pr√™t
        
        Statuts Mobile Money:
        en_attente: Transaction initi√©e, en cours de traitement
        confirme: Paiement valid√© par op√©rateur Mobile Money
        echec: Transaction √©chou√©e (solde insuffisant, erreur technique)
        timeout: D√©lai de confirmation d√©pass√©
        
        Tra√ßabilit√© compl√®te:
        R√©f√©rence unique pour chaque transaction
        Horodatage pr√©cis des op√©rations
        Logs de toutes les tentatives de paiement
        Historique des confirmations et rejets
        """,
        responses={200: PaymentSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Effectuer un paiement de remboursement",
        description="""
        Permet d'effectuer un paiement de remboursement via Mobile Money.
        
        Processus de remboursement:
        1. Client initie paiement depuis son interface ou USSD
        2. V√©rification de l'√©ch√©ance et du montant
        3. Initiation transaction Mobile Money
        4. Confirmation par l'op√©rateur (MTN/Moov)
        5. Mise √† jour automatique de l'√©ch√©ance
        6. Notifications de confirmation au client et √† la SFD
        
        Contr√¥les de s√©curit√©:
        Authentification Mobile Money requise (PIN)
        V√©rification du solde client suffisant
        Validation de l'√©ch√©ance et du montant
        Pr√©vention de la double d√©duction
        
        Gestion des cas particuliers:
        Paiements partiels autoris√©s avec report du solde
        Remboursements anticip√©s sans p√©nalit√©
        Paiements multiples pour une m√™me √©ch√©ance
        Annulation et remboursement en cas d'erreur
        """,
        request=PaymentSerializer,
        responses={
            201: PaymentSerializer,
            400: OpenApiResponse(description="Donn√©es de paiement invalides"),
            402: OpenApiResponse(description="Solde Mobile Money insuffisant"),
            404: OpenApiResponse(description="√âch√©ance non trouv√©e"),
            503: OpenApiResponse(description="Service Mobile Money indisponible")
        },
        examples=[
            OpenApiExample(
                "Paiement √©ch√©ance normale",
                value={
                    "echeance": 123,
                    "montant": 44424,
                    "numero_telephone": "+22370123456",  # MIGRATION : KKiaPay simplifi√©
                    # operateur et pin_mobile_money supprim√©s - KKiaPay g√®re automatiquement
                    "description": "Remboursement √©ch√©ance mensuelle juin 2025"
                }
            ),
            OpenApiExample(
                "Paiement partiel",
                value={
                    "echeance": 124,
                    "montant": 20000,
                    "numero_telephone": "+22369876543",
                    "description": "Paiement partiel - solde √† reporter"
                }
            )
        ]
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un paiement",
        description="""
        R√©cup√®re les informations d√©taill√©es d'un paiement sp√©cifique.
        
        Informations d√©taill√©es:
        Donn√©es compl√®tes de la transaction Mobile Money
        Statut de confirmation et r√©f√©rences externes
        √âch√©ance associ√©e et impact sur le solde
        Historique des tentatives si multiple
        Informations de r√©conciliation comptable
        """
    ),
    update=extend_schema(
        summary="Modifier un paiement",
        description="""
        Met √† jour un paiement existant (correction d'erreurs administratives).
        
        Modifications autoris√©es:
        Agents SFD: Correction statut pour r√©conciliation
        Admin: Ajustements exceptionnels avec justification
        Syst√®me: Mise √† jour automatique des confirmations
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'un paiement",
        description="Met √† jour partiellement un paiement existant."
    ),
    destroy=extend_schema(
        summary="Supprimer un paiement",
        description="Supprime un paiement (uniquement si √©chec confirm√© et aucun impact)."
    )
)
@extend_schema(tags=["üí≥ Paiements de Remboursement"])
class PaymentViewSet(viewsets.ModelViewSet):
    """
    ViewSet pour la gestion des paiements de remboursement.
    """
    serializer_class = PaymentSerializer
    
    def get_queryset(self):
        user = self.request.user
        
        if user.type_utilisateur == 'client':
            return Payment.objects.filter(
                echeance__pret__client=user
            ).order_by('-date_creation')
        
        elif user.type_utilisateur in ['agent_sfd', 'superviseur_sfd', 'admin_sfd']:
            return Payment.objects.filter(
                echeance__pret__client__compte_epargne__agent_validateur__sfd=user.sfd
            ).order_by('-date_creation')
        
        elif user.type_utilisateur == 'admin_plateforme':
            return Payment.objects.all().order_by('-date_creation')
        
        return Payment.objects.none()
    
    def get_serializer_class(self):
        if self.action == 'create':
            return PaymentSerializer
        return self.serializer_class
    
    def get_permissions(self):
        if self.action == 'create':
            return [CanMakeRepayment()]
        return [permissions.IsAuthenticated()]
    
    def perform_create(self, serializer):
        """Cr√©er un nouveau paiement."""
        try:
            echeance_id = self.request.data.get('echeance')
            montant = Decimal(str(self.request.data.get('montant', 0)))
            
            echeance = get_object_or_404(RepaymentSchedule, id=echeance_id)
            
            # V√©rifier que le client peut payer cette √©ch√©ance
            if self.request.user.type_utilisateur == 'client' and echeance.pret.client != self.request.user:
                raise ValidationError("Vous ne pouvez pas payer cette √©ch√©ance.")
            
            # V√©rifier que l'√©ch√©ance n'est pas d√©j√† pay√©e
            if echeance.statut == 'paye':
                raise ValidationError("Cette √©ch√©ance est d√©j√† pay√©e.")
            
            # Cr√©er le paiement
            paiement = serializer.save(
                echeance=echeance,
                montant=montant,
                numero_telephone=self.request.data.get('numero_telephone'),
                statut_kkiapay='pending'
            )
            
            # Initier le paiement KKiaPay
            from .tasks import traiter_remboursement_kkiapay
            traiter_remboursement_kkiapay(paiement.id)
            
            logger.info(f"Paiement {paiement.id} cr√©√© pour √©ch√©ance {echeance.id}")
            
        except Exception as e:
            logger.error(f"Erreur cr√©ation paiement: {e}")
            raise ValidationError(str(e))
    
    @extend_schema(
        summary="Confirmer un paiement manuellement",
        description="""
        Permet aux agents SFD de confirmer manuellement un paiement.
        
        **Cas d'usage de confirmation manuelle**:
        - R√©conciliation apr√®s probl√®me technique Mobile Money
        - Confirmation de paiements cash exceptionnels au guichet
        - Correction d'erreurs de traitement automatique
        - Validation de virements bancaires directs
        
        **Processus de confirmation**:
        1. V√©rification de l'identit√© de l'agent confirmateur
        2. Validation de la r√©f√©rence externe du paiement
        3. Contr√¥le de coh√©rence avec registres SFD
        4. Mise √† jour du statut et de l'√©ch√©ance associ√©e
        5. G√©n√©ration des notifications de confirmation
        
        **S√©curit√© et contr√¥les**:
        - Seuls agents SFD et superviseurs autoris√©s
        - Obligation de r√©f√©rence externe justificative
        - Logs complets de l'action avec tra√ßabilit√©
        - Notification automatique au superviseur
        
        **Effets de la confirmation**:
        - Statut paiement ‚Üí 'confirme'
        - Mise √† jour de l'√©ch√©ance correspondante
        - Recalcul du solde restant d√ª du pr√™t
        - Notifications client et √©quipes SFD
        
        **Tra√ßabilit√©**:
        - Identification de l'agent confirmateur
        - Horodatage pr√©cis de la confirmation
        - R√©f√©rence du justificatif externe
        - Commentaires explicatifs obligatoires
        """,
        request={
            'application/json': {
                'type': 'object',
                'properties': {
                    'reference_externe': {
                        'type': 'string',
                        'description': 'R√©f√©rence du paiement dans syst√®me externe'
                    },
                    'commentaire': {
                        'type': 'string', 
                        'description': 'Justification de la confirmation manuelle'
                    },
                    'mode_paiement': {
                        'type': 'string',
                        'enum': ['kkiapay_auto', 'especes_guichet', 'virement_bancaire', 'cheque'],
                        'description': 'Mode de paiement confirm√©'
                    }
                },
                'required': ['reference_externe', 'commentaire']
            }
        },
        responses={
            200: PaymentSerializer,
            400: OpenApiResponse(description="Paiement d√©j√† confirm√© ou donn√©es invalides"),
            403: OpenApiResponse(description="Non autoris√© √† confirmer les paiements"),
            404: OpenApiResponse(description="Paiement non trouv√©")
        },
        examples=[
            OpenApiExample(
                "Confirmation apr√®s probl√®me technique",
                value={
                    "reference_externe": "MTN_REF_789456123",
                    "commentaire": "Confirmation manuelle apr√®s timeout technique MTN - paiement v√©rifi√© sur relev√© op√©rateur",
                    "mode_paiement": "kkiapay_auto"
                }
            ),
            OpenApiExample(
                "Paiement esp√®ces exceptionnel",
                value={
                    "reference_externe": "CASH_REC_2025_001234",
                    "commentaire": "Paiement en esp√®ces autoris√© exceptionnellement - client en zone sans couverture Mobile Money",
                    "mode_paiement": "especes_guichet"
                }
            )
        ]
    )
    @action(detail=True, methods=['post'], url_path='confirmer')
    def confirmer(self, request, pk=None):
        """Confirmer un paiement manuellement (pour les agents)."""
        paiement = self.get_object()
        
        # Seuls les agents/admins peuvent confirmer manuellement
        if request.user.type_utilisateur not in ['agent_sfd', 'superviseur_sfd', 'admin_sfd', 'admin_plateforme']:
            return Response(
                {'erreur': 'Non autoris√©'},
                status=status.HTTP_403_FORBIDDEN
            )
        
        if paiement.statut_kkiapay == 'success':
            return Response(
                {'erreur': 'Ce paiement est d√©j√† confirm√©'},
                status=status.HTTP_400_BAD_REQUEST
            )
        
        try:
            with transaction.atomic():
                # Confirmer le paiement
                paiement.statut_kkiapay = 'success'
                paiement.date_confirmation = timezone.now()
                paiement.reference_externe = request.data.get('reference_externe', '')
                paiement.confirme_par = request.user
                paiement.save()
                
                # D√©clencher la confirmation (met √† jour l'√©ch√©ance)
                paiement.confirmer_paiement()
                
                return Response({
                    'message': 'Paiement confirm√© avec succ√®s',
                    'paiement': PaymentSerializer(paiement).data
                })
        
        except Exception as e:
            logger.error(f"Erreur confirmation paiement {pk}: {e}")
            return Response(
                {'erreur': str(e)},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# =============================================================================
# RAPPORTS ET STATISTIQUES
# =============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Endpoints de rapports et statistiques",
        description="""
        ViewSet fournissant les endpoints pour g√©n√©rer des rapports et statistiques sur les pr√™ts.
        
        Fonctionnalit√©s disponibles:
        - Statistiques consolid√©es par p√©riode
        - Tableau de bord temps r√©el par r√¥le
        - Rapports d'analyse de performance
        - Indicateurs de risque et recouvrement
        - Exportation de donn√©es pour audit
        """
    )
)
@extend_schema(tags=["üìä Rapports et Statistiques"])
class LoanReportViewSet(viewsets.ViewSet):
    """
    ViewSet pour les rapports et statistiques des pr√™ts.
    """
    permission_classes = [permissions.IsAuthenticated]
    
    @extend_schema(
        summary="Statistiques g√©n√©rales des pr√™ts",
        description="""
        G√©n√®re des statistiques consolid√©es sur l'activit√© de pr√™ts.
        
        **M√©triques calcul√©es**:
        - Volume et nombre de demandes sur la p√©riode
        - Taux d'approbation et de rejet par √©tape du workflow
        - Montants d√©caiss√©s et en cours de remboursement
        - Performance de recouvrement et taux de d√©faut
        - Dur√©e moyenne de traitement des demandes
        
        **Indicateurs de performance**:
        - Portefeuille √† risque (PAR) √† 30, 60 et 90+ jours
        - Taux de r√©cup√©ration et provisions n√©cessaires
        - Rendement sur actifs de cr√©dit (ROA)
        - Co√ªt du risque et rentabilit√© par segment
        
        **Segmentation des donn√©es**:
        - Par type de pr√™t (commerce, agriculture, consommation)
        - Par montant (micro, petit, moyen cr√©dit)
        - Par profil client (score de fiabilit√©)
        - Par agent/superviseur traitant
        
        **√âvolution temporelle**:
        - Comparaison avec p√©riodes pr√©c√©dentes
        - Tendances mensuelles et saisonni√®res
        - Projections bas√©es sur pipeline actuel
        - Alertes sur d√©viations significatives
        
        **Filtrage par SFD**:
        Agents/Superviseurs/Admins SFD: Donn√©es de leur SFD uniquement
        Admin Plateforme: Vue consolid√©e toutes SFD
        """,
        parameters=[
            OpenApiParameter(
                'periode_mois', 
                OpenApiTypes.INT, 
                location=OpenApiParameter.QUERY, 
                default=12,
                description="Nombre de mois √† inclure dans l'analyse (d√©faut: 12)"
            ),
            OpenApiParameter(
                'type_pret',
                OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                description="Filtrer par type de pr√™t sp√©cifique",
                required=False
            ),
            OpenApiParameter(
                'montant_min',
                OpenApiTypes.NUMBER,
                location=OpenApiParameter.QUERY,
                description="Montant minimum des pr√™ts √† inclure",
                required=False
            ),
            OpenApiParameter(
                'montant_max',
                OpenApiTypes.NUMBER,
                location=OpenApiParameter.QUERY,
                description="Montant maximum des pr√™ts √† inclure", 
                required=False
            )
        ],
        responses={
            200: OpenApiResponse(description="Statistiques des pr√™ts r√©cup√©r√©es"),
            403: OpenApiResponse(description="Non autoris√© √† consulter les statistiques"),
            500: OpenApiResponse(description="Erreur calcul des statistiques")
        }
    )
    @action(detail=False, methods=['get'], url_path='statistiques')
    def statistiques(self, request):
        """Obtient les statistiques des pr√™ts."""
        periode_mois = int(request.GET.get('periode_mois', 12))
        
        # Filtrer par SFD si applicable
        sfd = None
        if request.user.type_utilisateur in ['agent_sfd', 'superviseur_sfd', 'admin_sfd']:
            sfd = request.user.sfd
        
        try:
            stats = calculer_statistiques_prets(sfd=sfd, periode_mois=periode_mois)
            return Response(stats)
        except Exception as e:
            logger.error(f"Erreur calcul statistiques: {e}")
            return Response(
                {'erreur': 'Erreur lors du calcul des statistiques'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )
    
    @extend_schema(
        summary="Tableau de bord des pr√™ts",
        description="""
        Interface de pilotage temps r√©el de l'activit√© de pr√™ts avec KPI visuels.
        
        **Widgets de monitoring en temps r√©el**:
        - Demandes en attente par √©tape (Agent ‚Üí Superviseur ‚Üí Admin SFD)  
        - Pr√™ts d√©caiss√©s aujourd'hui/cette semaine/ce mois
        - Remboursements attendus vs re√ßus (jour/semaine/mois)
        - Alertes pr√™ts en retard par niveau de gravit√©
        
        **Indicateurs de performance**:
        - Volume portefeuille actif et √©volution
        - Taux de d√©faut et provisions n√©cessaires
        - D√©lai moyen traitement demandes par √©tape
        - Productivit√© agents (demandes trait√©es/jour)
        
        **Alertes et actions prioritaires**:
        - Pr√™ts en retard n√©cessitant un suivi imm√©diat
        - Demandes d√©passant les d√©lais standards
        - D√©passements de limite par agent/superviseur
        - Anomalies d√©tect√©es dans les patterns
        
        **Navigation rapide**:
        - Liens directs vers demandes en attente d'action
        - Acc√®s rapide aux dossiers probl√©matiques
        - Shortcut vers outils de reporting
        - Actions en un clic (approbations simples)
        
        **Personnalisation par r√¥le**:
        - Agent: Focus sur ses demandes et clients
        - Superviseur: Vue √©quipe et validation
        - Admin SFD: Pilotage global SFD
        - Admin Plateforme: Monitoring multi-SFD
        
        **Rafra√Æchissement automatique**:
        Donn√©es mises √† jour en temps r√©el via WebSocket
        Cache intelligent pour performance optimale
        """,
        parameters=[
            OpenApiParameter(
                'niveau_detail',
                OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                default='standard',
                enum=['minimal', 'standard', 'detaille'],
                description="Niveau de d√©tail du tableau de bord (minimal/standard/detaille)"
            ),
            OpenApiParameter(
                'periode_analyse',
                OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                default='7d',
                enum=['1d', '7d', '30d', '90d'],
                description="P√©riode d'analyse pour tendances (1d/7d/30d/90d)"
            ),
            OpenApiParameter(
                'widgets_actifs',
                OpenApiTypes.STR,
                location=OpenApiParameter.QUERY,
                description="Liste widgets √† afficher (s√©par√©s par virgule)",
                required=False
            )
        ],
        responses={
            200: OpenApiResponse(description="Donn√©es du tableau de bord r√©cup√©r√©es"),
            403: OpenApiResponse(description="Non autoris√© √† acc√©der au tableau de bord"),
            500: OpenApiResponse(description="Erreur g√©n√©ration tableau de bord")
        }
    )
    @action(detail=False, methods=['get'])
    def tableau_bord(self, request):
        """Tableau de bord avec indicateurs cl√©s."""
        try:
            user = request.user
            
            # Construire les filtres selon le type d'utilisateur
            if user.type_utilisateur == 'client':
                # Dashboard client
                demandes = LoanApplication.objects.filter(client=user)
                prets = Loan.objects.filter(client=user)
                
                dashboard = {
                    'type': 'client',
                    'demandes': {
                        'total': demandes.count(),
                        'en_cours': demandes.exclude(statut__in=['accorde', 'rejete']).count(),
                        'accordees': demandes.filter(statut='accorde').count(),
                        'rejetees': demandes.filter(statut='rejete').count()
                    },
                    'prets': {
                        'total': prets.count(),
                        'en_cours': prets.exclude(statut__in=['solde', 'en_defaut']).count(),
                        'soldes': prets.filter(statut='solde').count()
                    }
                }
                
                # Prochaines √©ch√©ances
                prochaines_echeances = RepaymentSchedule.objects.filter(
                    pret__client=user,
                    statut__in=['prevu', 'en_retard'],
                    date_echeance__lte=timezone.now().date() + timedelta(days=30)
                ).order_by('date_echeance')[:5]
                
                dashboard['prochaines_echeances'] = RepaymentScheduleSerializer(
                    prochaines_echeances, many=True
                ).data
                
            else:
                # Dashboard agent/admin
                # Filtrer par SFD
                if user.type_utilisateur in ['agent_sfd', 'superviseur_sfd', 'admin_sfd']:
                    demandes = LoanApplication.objects.filter(
                        client__compte_epargne__agent_validateur__sfd=user.sfd
                    )
                    prets = Loan.objects.filter(
                        client__compte_epargne__agent_validateur__sfd=user.sfd
                    )
                else:
                    demandes = LoanApplication.objects.all()
                    prets = Loan.objects.all()
                
                from django.db import models
                
                dashboard = {
                    'type': 'admin',
                    'demandes_en_attente': {
                        'soumises': demandes.filter(statut='soumis').count(),
                        'transferees': demandes.filter(statut='transfere_admin').count(),
                        'total': demandes.exclude(statut__in=['accorde', 'rejete']).count()
                    },
                    'prets_a_decaisser': prets.filter(statut='accorde').count(),
                    'echeances_en_retard': RepaymentSchedule.objects.filter(
                        pret__in=prets,
                        statut='en_retard'
                    ).count(),
                    'montant_en_cours': float(
                        prets.filter(statut__in=['decaisse', 'en_remboursement'])
                        .aggregate(total=models.Sum('montant_accorde'))['total'] or 0
                    )
                }
            
            return Response(dashboard)
            
        except Exception as e:
            logger.error(f"Erreur tableau de bord: {e}")
            return Response(
                {'erreur': 'Erreur lors de la g√©n√©ration du tableau de bord'},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )


# =============================================================================
# FONCTIONS UTILITAIRES
# =============================================================================

def get_client_from_request(request):
    """R√©cup√®re le client depuis la requ√™te."""
    if hasattr(request.user, 'client'):
        return request.user.client
    return request.user if request.user.type_utilisateur == 'client' else None
