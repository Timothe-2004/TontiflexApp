"""
Test r√©el de retrait de tontines avec KKiaPay Sandbox
====================================================

Ce test utilise le vrai sandbox KKiaPay avec des num√©ros de test officiels
et v√©rifie les transactions c√¥t√© serveur avec le SDK Python.

Documentation:
- SDK JavaScript: https://docs.kkiapay.me/v1/plugin-et-sdk/sdk-javascript
- SDK Python: https://docs.kkiapay.me/v1/plugin-et-sdk/admin-sdks-server-side/python-admin-sdk
- Num√©ros de test: https://docs.kkiapay.me/v1/compte/kkiapay-sandbox-guide-de-test
"""

import os
import sys
import django
import requests
import json
import time
from decimal import Decimal
from django.test import TestCase, TransactionTestCase, override_settings
from django.utils import timezone
from django.contrib.auth import get_user_model

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tontiflex.settings')

# Import des mod√®les TontiFlex
from accounts.models import SFD, AdministrateurSFD, AgentSFD, Client
from tontines.models import Tontine, TontineParticipant, Cotisation, Retrait, SoldeTontine
from payments.models import KKiaPayTransaction
from payments.config import kkiapay_config

# Import du SDK KKiaPay (d√©j√† install√© selon vous)
from kkiapay import Kkiapay

User = get_user_model()


class TestRetraitTontineKKiaPaySandboxReel(TransactionTestCase):
    """
    Tests r√©els avec le vrai sandbox KKiaPay pour les retraits de tontines
    Utilise l'API REST et le SDK Python pour des tests complets
    """
    
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        
        # Initialiser le SDK KKiaPay en mode sandbox avec vos vraies cl√©s
        try:
            cls.kkiapay = Kkiapay(
                kkiapay_config.public_key,
                kkiapay_config.private_key,
                kkiapay_config.secret_key,
                sandbox=True
            )
            print("‚úÖ SDK KKiaPay initialis√© en mode sandbox avec vos cl√©s")
        except Exception as e:
            raise Exception(f"Impossible d'initialiser KKiaPay: {e}")
        
        # Num√©ros de test officiels KKiaPay
        cls.test_numbers = {
            'mtn_benin_success': '+22990000000',      # MTN B√©nin - Succ√®s imm√©diat
            'mtn_benin_success2': '+22997000000',     # MTN B√©nin - Succ√®s alternatif
            'mtn_benin_delayed': '+22961100000',      # MTN B√©nin - Succ√®s avec d√©lai
            'mtn_benin_error': '+22961000001',        # MTN B√©nin - Erreur processing
            'mtn_benin_insufficient': '+22961000002', # MTN B√©nin - Fonds insuffisants
            'moov_success': '+22968000000',           # Moov - Succ√®s imm√©diat
            'moov_delayed': '+22968100000',           # Moov - Succ√®s avec d√©lai
            'moov_error': '+22968000001',             # Moov - Erreur processing
        }
    
    def setUp(self):
        """Configuration des donn√©es de test pour chaque test"""
        print("\nüîß Configuration des donn√©es de test TontiFlex...")
        
        # Cr√©er une SFD
        self.sfd = SFD.objects.create(
            id="SFD_KKIA_REAL",
            nom="SFD KKiaPay Test R√©el",
            adresse="123 Rue du Test R√©el",
            telephone="+22912345555",
            email="real.test@tontiflex.com",
            numeroMobileMoney=self.test_numbers['mtn_benin_success']
        )
        
        # Cr√©er un administrateur SFD
        admin_user = User.objects.create_user(
            email='admin.real@tontiflex.com',
            password='testpass123',
            username='admin_real_test'
        )
        self.admin_sfd = AdministrateurSFD.objects.create(
            user=admin_user,
            nom="Admin",
            prenom="Test R√©el",
            telephone="+22912345556",
            email="admin.real@tontiflex.com",
            adresse="Adresse admin r√©el",
            profession="Administrateur SFD",
            motDePasse="hashed_password",
            sfd=self.sfd
        )
        
        # Cr√©er un agent SFD
        agent_user = User.objects.create_user(
            email='agent.real@tontiflex.com',
            password='testpass123',
            username='agent_real_test'
        )
        self.agent_sfd = AgentSFD.objects.create(
            user=agent_user,
            nom="Agent",
            prenom="Test R√©el",
            telephone="+22912345557",
            email="agent.real@tontiflex.com",
            adresse="Adresse agent r√©el",
            profession="Agent SFD",
            motDePasse="hashed_password",
            sfd=self.sfd,
            est_actif=True
        )
        
        # Cr√©er un client avec num√©ro de test MTN succ√®s
        client_user = User.objects.create_user(
            email='client.real@tontiflex.com',
            password='testpass123',
            username='client_real_test'
        )
        self.client = Client.objects.create(
            user=client_user,
            nom="Kone",
            prenom="Amadou",
            telephone=self.test_numbers['mtn_benin_success'],  # Num√©ro de test succ√®s
            email="client.real@tontiflex.com",
            adresse="Cotonou, B√©nin",
            profession="Commer√ßant",
            motDePasse="hashed_password",
            scorefiabilite=Decimal('95.00')
        )
        
        # Cr√©er une tontine de test
        self.tontine = Tontine.objects.create(
            nom='Tontine KKiaPay Test R√©el',
            montantMinMise=Decimal('5000.00'),
            montantMaxMise=Decimal('100000.00'),
            fraisAdhesion=Decimal('1000.00'),
            administrateurId=self.admin_sfd,
            reglesRetrait={
                "delai_minimum": 1,
                "montant_minimum": 5000,
                "montant_maximum": 500000,
                "frais_retrait": 250,
                "methodes_paiement": ["kkiapay", "mobile_money"],
                "operateurs_autorises": ["MTN", "MOOV"]
            },
            statut=Tontine.StatutChoices.ACTIVE
        )
        
        # Cr√©er un participant
        self.participant = TontineParticipant.objects.create(
            client=self.client,
            tontine=self.tontine,
            montantMise=Decimal('25000.00'),
            dateAdhesion=timezone.now(),
            statut='actif'
        )
        
        # Cr√©er des cotisations pour donner un solde substantiel
        for i in range(10):  # 10 cotisations de 25000 FCFA = 250000 FCFA
            Cotisation.objects.create(
                client=self.client,
                tontine=self.tontine,
                montant=Decimal('25000.00'),
                statut='confirmee',
                numero_transaction=f'REAL_TEST_COT_{i:03d}'
            )
        
        # Cr√©er le solde tontine
        self.solde_tontine = SoldeTontine.objects.create(
            client=self.client,
            tontine=self.tontine,
            solde=Decimal('250000.00')  # Solde important pour tester diff√©rents montants
        )
        
        print(f"‚úÖ Donn√©es configur√©es:")
        print(f"   - Client: {self.client.nom} {self.client.prenom}")
        print(f"   - T√©l√©phone: {self.client.telephone}")
        print(f"   - Solde tontine: {self.solde_tontine.solde} FCFA")
        print(f"   - Tontine: {self.tontine.nom}")
    
    def test_retrait_kkiapay_api_rest_initiation(self):
        """
        Test d'initiation de retrait via l'API REST KKiaPay
        """
        print("\nüöÄ === TEST INITIATION RETRAIT VIA API REST KKIAPAY ===")
        
        # √âTAPE 1: Cr√©er une demande de retrait TontiFlex
        montant_retrait = Decimal('50000.00')
        retrait = Retrait.objects.create(
            client=self.client,
            tontine=self.tontine,
            montant=montant_retrait
        )
        
        # √âTAPE 2: Approuver le retrait
        retrait.approuver(
            agent=self.agent_sfd,
            commentaires="Retrait approuv√© pour test API REST KKiaPay"
        )
        
        print(f"üìù Retrait TontiFlex cr√©√© et approuv√©:")
        print(f"   - ID: {retrait.id}")
        print(f"   - Montant: {montant_retrait} FCFA")
        print(f"   - Statut: {retrait.get_statut_display()}")
        
        # √âTAPE 3: Initier le paiement via l'API REST KKiaPay
        url = "https://api-sandbox.kkiapay.me/api/v1/transactions/initiate"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {kkiapay_config.public_key}"
        }
        
        payload = {
            "amount": int(montant_retrait),
            "phone": self.client.telephone,
            "reason": f"Retrait tontine {self.tontine.nom} - {self.client.nom}",
            "callback": f"http://localhost:8000/api/payments/webhook/retrait/{retrait.id}/",
            "data": json.dumps({
                "retrait_id": str(retrait.id),
                "tontine_id": str(self.tontine.id),
                "client_id": str(self.client.id),
                "type": "retrait_tontine"
            })
        }
        
        print(f"üåê Initiation paiement KKiaPay:")
        print(f"   - URL: {url}")
        print(f"   - Montant: {payload['amount']} FCFA")
        print(f"   - T√©l√©phone: {payload['phone']}")
        print(f"   - Motif: {payload['reason']}")
        
        try:
            response = requests.post(url, json=payload, headers=headers, timeout=30)
            response.raise_for_status()
            result = response.json()
            
            print(f"‚úÖ Paiement initi√© avec succ√®s:")
            print(f"   - Transaction ID: {result.get('transactionId')}")
            print(f"   - Statut: {result.get('status', 'N/A')}")
            print(f"   - Message: {result.get('message', 'N/A')}")
            
            # Cr√©er l'enregistrement KKiaPayTransaction
            transaction_kkia = KKiaPayTransaction.objects.create(
                reference_tontiflex=f"RETRAIT_API_{retrait.id}",
                reference_kkiapay=result.get('transactionId'),
                type_transaction='retrait_tontine',
                status='pending',
                montant=montant_retrait,
                devise='XOF',
                user=self.client.user,
                numero_telephone=self.client.telephone,
                description=payload['reason'],
                kkiapay_response=result
            )
            
            print(f"üíæ Transaction enregistr√©e en base:")
            print(f"   - ID interne: {transaction_kkia.id}")
            print(f"   - R√©f√©rence KKiaPay: {transaction_kkia.reference_kkiapay}")
            
            # Attendre un peu pour la propagation
            print("‚è≥ Attente de 5 secondes pour la propagation...")
            time.sleep(5)
            
            # √âTAPE 4: V√©rifier le statut avec le SDK Python
            if result.get('transactionId'):
                print(f"üîç V√©rification avec SDK Python...")
                try:
                    verification = self.kkiapay.verify_transaction(result['transactionId'])
                    print(f"üìä R√©sultat v√©rification:")
                    print(f"   - Transaction ID: {verification.transactionId}")
                    print(f"   - Statut: {verification.status}")
                    print(f"   - Montant: {verification.amount}")
                    print(f"   - Frais: {verification.fees}")
                    print(f"   - Effectu√© le: {verification.performedAt}")
                    
                    # Mettre √† jour le statut en base
                    transaction_kkia.status = verification.status.lower()
                    transaction_kkia.save()
                    
                    # Si succ√®s, confirmer le retrait TontiFlex
                    if verification.status.upper() == 'SUCCESS':
                        retrait.statut = Retrait.StatutRetraitChoices.CONFIRMEE
                        retrait.save()
                        print("‚úÖ Retrait TontiFlex confirm√©!")
                    
                except Exception as e:
                    print(f"‚ö†Ô∏è Erreur v√©rification SDK: {e}")
            
            return {
                'retrait': retrait,
                'transaction_kkia': transaction_kkia,
                'api_response': result
            }
            
        except requests.exceptions.RequestException as e:
            print(f"‚ùå Erreur API REST: {e}")
            if hasattr(e, 'response') and e.response:
                print(f"   - Code: {e.response.status_code}")
                print(f"   - R√©ponse: {e.response.text}")
            return None
        except Exception as e:
            print(f"‚ùå Erreur inattendue: {e}")
            return None
    
    def test_retrait_avec_differents_numeros_test(self):
        """
        Test des retraits avec diff√©rents num√©ros de test KKiaPay
        """
        print("\nüì± === TEST AVEC DIFF√âRENTS NUM√âROS DE TEST ===")
        
        scenarios_test = [
            ('mtn_benin_success', 'MTN B√©nin - Succ√®s imm√©diat', 25000),
            ('mtn_benin_delayed', 'MTN B√©nin - Succ√®s avec d√©lai', 15000),
            ('moov_success', 'Moov - Succ√®s imm√©diat', 35000),
            ('mtn_benin_error', 'MTN B√©nin - Erreur attendue', 10000),
        ]
        
        resultats = []
        
        for scenario_key, description, montant in scenarios_test:
            print(f"\nüìû Test: {description}")
            numero = self.test_numbers[scenario_key]
            print(f"   - Num√©ro: {numero}")
            print(f"   - Montant: {montant} FCFA")
            
            # Cr√©er un client sp√©cifique pour ce test
            client_test_user = User.objects.create_user(
                email=f'{scenario_key}@test.com',
                username=f'test_{scenario_key}',
                password='testpass123'
            )
            client_test = Client.objects.create(
                user=client_test_user,
                nom="Test",
                prenom=description.split(' - ')[0],
                telephone=numero,
                email=f'{scenario_key}@test.com',
                adresse="Adresse test",
                profession="Test",
                motDePasse="test"
            )
            
            # Cr√©er participant et solde
            participant_test = TontineParticipant.objects.create(
                client=client_test,
                tontine=self.tontine,
                montantMise=Decimal('10000.00'),
                dateAdhesion=timezone.now(),
                statut='actif'
            )
            
            solde_test = SoldeTontine.objects.create(
                client=client_test,
                tontine=self.tontine,
                solde=Decimal('100000.00')
            )
            
            # Cr√©er et approuver le retrait
            retrait_test = Retrait.objects.create(
                client=client_test,
                tontine=self.tontine,
                montant=Decimal(str(montant))
            )
            
            retrait_test.approuver(
                agent=self.agent_sfd,
                commentaires=f"Test {description}"
            )
            
            # Initier le paiement KKiaPay
            url = "https://api-sandbox.kkiapay.me/api/v1/transactions/initiate"
            headers = {
                "Content-Type": "application/json",
                "Authorization": f"Bearer {kkiapay_config.public_key}"
            }
            
            payload = {
                "amount": montant,
                "phone": numero,
                "reason": f"Test {description}",
                "data": json.dumps({
                    "scenario": scenario_key,
                    "retrait_id": str(retrait_test.id)
                })
            }
            
            try:
                response = requests.post(url, json=payload, headers=headers, timeout=15)
                response.raise_for_status()
                result = response.json()
                
                print(f"   ‚úÖ Initiation r√©ussie: {result.get('transactionId', 'N/A')}")
                
                # Attendre et v√©rifier
                time.sleep(3)
                
                if result.get('transactionId'):
                    try:
                        verification = self.kkiapay.verify_transaction(result['transactionId'])
                        print(f"   üìä Statut: {verification.status}")
                        resultats.append({
                            'scenario': scenario_key,
                            'description': description,
                            'numero': numero,
                            'montant': montant,
                            'transaction_id': result.get('transactionId'),
                            'statut': verification.status,
                            'succes': verification.status.upper() == 'SUCCESS'
                        })
                    except Exception as e:
                        print(f"   ‚ö†Ô∏è Erreur v√©rification: {e}")
                        resultats.append({
                            'scenario': scenario_key,
                            'description': description,
                            'numero': numero,
                            'montant': montant,
                            'erreur': str(e)
                        })
                
            except Exception as e:
                print(f"   ‚ùå Erreur initiation: {e}")
                resultats.append({
                    'scenario': scenario_key,
                    'description': description,
                    'numero': numero,
                    'montant': montant,
                    'erreur': str(e)
                })
        
        # R√©sum√© des r√©sultats
        print(f"\nüìä R√âSUM√â DES TESTS:")
        print("="*60)
        for resultat in resultats:
            if 'erreur' in resultat:
                print(f"‚ùå {resultat['description']}: {resultat['erreur']}")
            else:
                status_icon = "‚úÖ" if resultat.get('succes') else "‚ö†Ô∏è"
                print(f"{status_icon} {resultat['description']}: {resultat.get('statut', 'N/A')}")
        
        return resultats
    
    def test_verification_transaction_existante(self):
        """
        Test de v√©rification d'une transaction existante
        (utiliser un vrai transaction_id du sandbox si disponible)
        """
        print("\nüîç === TEST V√âRIFICATION TRANSACTION EXISTANTE ===")
        
        # Si vous avez une transaction_id r√©elle du sandbox, l'utiliser ici
        # Sinon, cr√©er une nouvelle transaction de test
        test_transaction_id = "test_sandbox_transaction_id"
        
        try:
            verification = self.kkiapay.verify_transaction(test_transaction_id)
            
            print(f"‚úÖ Transaction v√©rifi√©e:")
            print(f"   - ID: {verification.transactionId}")
            print(f"   - Statut: {verification.status}")
            print(f"   - Montant: {verification.amount}")
            print(f"   - Frais: {verification.fees}")
            print(f"   - Source: {verification.source}")
            print(f"   - Effectu√© le: {verification.performedAt}")
            
            return verification
            
        except Exception as e:
            print(f"‚ÑπÔ∏è Transaction de test non trouv√©e (normal): {e}")
            print("üí° Pour tester avec une vraie transaction:")
            print("   1. Effectuez d'abord un paiement via l'interface HTML")
            print("   2. R√©cup√©rez le transaction_id")
            print("   3. Utilisez-le dans ce test")
            return None
    
    def generer_donnees_interface_html(self):
        """
        G√©n√®re les donn√©es n√©cessaires pour l'interface HTML de test
        """
        print("\nüé® === G√âN√âRATION DONN√âES INTERFACE HTML ===")
        
        # Cr√©er un retrait de test pour l'interface
        retrait_html = Retrait.objects.create(
            client=self.client,
            tontine=self.tontine,
            montant=Decimal('75000.00')
        )
        
        retrait_html.approuver(
            agent=self.agent_sfd,
            commentaires="Retrait pour test interface HTML"
        )
        
        # Configuration compl√®te pour le widget KKiaPay
        widget_config = {
            'public_key': kkiapay_config.public_key,
            'amount': int(retrait_html.montant),
            'sandbox': True,
            'phone': self.client.telephone,
            'name': f"{self.client.prenom} {self.client.nom}",
            'email': self.client.email,
            'callback': f'http://localhost:8000/api/payments/success/{retrait_html.id}/',
            'webhookurl': f'http://localhost:8000/api/payments/webhook/retrait/{retrait_html.id}/',
            'theme': '#dc3545',  # Rouge pour retrait
            'position': 'center',
            'paymentmethod': 'momo',
            'description': f"Retrait tontine {self.tontine.nom}",
            'data': json.dumps({
                'retrait_id': str(retrait_html.id),
                'tontine_id': str(self.tontine.id),
                'client_id': str(self.client.id),
                'type': 'retrait_tontine'
            })
        }
        
        # Donn√©es compl√®tes pour l'interface
        interface_data = {
            'retrait': {
                'id': str(retrait_html.id),
                'montant': str(retrait_html.montant),
                'statut': retrait_html.statut,
                'date_creation': retrait_html.date_demande_retrait.isoformat()
            },
            'client': {
                'nom': self.client.nom,
                'prenom': self.client.prenom,
                'telephone': self.client.telephone,
                'email': self.client.email
            },
            'tontine': {
                'id': str(self.tontine.id),
                'nom': self.tontine.nom,
                'solde_client': str(self.solde_tontine.solde)
            },
            'widget_config': widget_config,
            'test_numbers': self.test_numbers,
            'api_endpoints': {
                'webhook': f'http://localhost:8000/api/payments/webhook/retrait/{retrait_html.id}/',
                'success': f'http://localhost:8000/api/payments/success/{retrait_html.id}/',
                'verify': f'http://localhost:8000/api/payments/verify/{retrait_html.id}/'
            }
        }
        
        # Sauvegarder dans un fichier JSON pour l'interface HTML
        json_file = os.path.join(
            os.path.dirname(__file__),
            'test_retrait_kkiapay_data.json'
        )
        
        with open(json_file, 'w', encoding='utf-8') as f:
            json.dump(interface_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Donn√©es sauvegard√©es dans: {json_file}")
        print(f"üì± Configuration widget:")
        print(f"   - Cl√© publique: {widget_config['public_key'][:20]}...")
        print(f"   - Montant: {widget_config['amount']} FCFA")
        print(f"   - T√©l√©phone: {widget_config['phone']}")
        print(f"   - Mode sandbox: {widget_config['sandbox']}")
        
        return interface_data
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        super().tearDown()


if __name__ == "__main__":
    print("üß™ Test de retrait KKiaPay sandbox r√©el")
    print("üìã Ce script teste l'int√©gration compl√®te avec le vrai sandbox KKiaPay")
    print("üîë Assurez-vous que vos cl√©s sandbox sont configur√©es dans kkiapay_config")
    print("üåê L'interface HTML sera g√©n√©r√©e pour tester manuellement le widget")
    print("\nPour lancer les tests:")
    print("  python manage.py test tontines.test_retrait_kkiapay_sandbox")
    """
    Tests r√©els avec le sandbox KKiaPay pour les retraits de tontines
    """
    
    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        
        # V√©rifier que le SDK KKiaPay est disponible
        if not KKIAPAY_SDK_AVAILABLE:
            pytest.skip("SDK KKiaPay non disponible")
        
        # Initialiser le SDK KKiaPay en mode sandbox
        try:
            cls.kkiapay = Kkiapay(
                public_key="d1297c10527a11f0a266e50dce82524c",
                private_key="sk_sandbox_votre_cle_privee",  # √Ä remplacer
                secret="sk_sandbox_votre_secret",  # √Ä remplacer
                sandbox=True
            )
            print("‚úÖ SDK KKiaPay initialis√© en mode sandbox")
        except Exception as e:
            pytest.skip(f"Impossible d'initialiser KKiaPay: {e}")
    
    def setUp(self):
        """Configuration des donn√©es de test"""
        print("\nüîß Configuration des donn√©es de test...")
        
        # Cr√©er une SFD
        self.sfd = SFD.objects.create(
            id="SFD_KKIA_SANDBOX",
            nom="SFD KKiaPay Sandbox",
            adresse="123 Rue Sandbox",
            telephone="+22912345000",
            email="sandbox@tontiflex.com",
            numeroMobileMoney="22961000000"  # Num√©ro de test MTN
        )
        
        # Cr√©er un administrateur SFD
        admin_user = User.objects.create_user(
            email='admin.sandbox@tontiflex.com',
            password='testpass123',
            username='admin_sandbox'
        )
        self.admin_sfd = AdministrateurSFD.objects.create(
            user=admin_user,
            nom="Admin",
            prenom="Sandbox",
            telephone="+22961000001",
            email="admin.sandbox@tontiflex.com",
            adresse="Adresse admin sandbox",
            profession="Administrateur SFD",
            motDePasse="hashed_password",
            sfd=self.sfd
        )
        
        # Cr√©er un agent SFD
        agent_user = User.objects.create_user(
            email='agent.sandbox@tontiflex.com',
            password='testpass123',
            username='agent_sandbox'
        )
        self.agent_sfd = AgentSFD.objects.create(
            user=agent_user,
            nom="Agent",
            prenom="Sandbox",
            telephone="+22961000002",
            email="agent.sandbox@tontiflex.com",
            adresse="Adresse agent sandbox",
            profession="Agent SFD",
            motDePasse="hashed_password",
            sfd=self.sfd,
            est_actif=True
        )
        
        # Cr√©er un client avec num√©ro de test
        client_user = User.objects.create_user(
            email='client.sandbox@tontiflex.com',
            password='testpass123',
            username='client_sandbox'
        )
        self.client = Client.objects.create(
            user=client_user,
            nom="Dosso",
            prenom="Moussa",
            telephone="+22961000000",  # Num√©ro de test MTN B√©nin (succ√®s)
            email="client.sandbox@tontiflex.com",
            adresse="Cotonou, B√©nin",
            profession="Commer√ßant",
            motDePasse="hashed_password",
            scorefiabilite=Decimal('90.00')
        )
        
        # Cr√©er une tontine
        self.tontine = Tontine.objects.create(
            nom='Tontine Sandbox KKiaPay',
            montantMinMise=Decimal('1000.00'),
            montantMaxMise=Decimal('50000.00'),
            fraisAdhesion=Decimal('500.00'),
            administrateurId=self.admin_sfd,
            reglesRetrait={
                "delai_minimum": 1,  # 1 jour pour test
                "montant_minimum": 1000,
                "montant_maximum": 100000,
                "frais_retrait": 100,
                "methodes_paiement": ["kkiapay", "mobile_money"]
            },
            statut=Tontine.StatutChoices.ACTIVE
        )
        
        # Cr√©er un participant
        self.participant = TontineParticipant.objects.create(
            client=self.client,
            tontine=self.tontine,
            montantMise=Decimal('10000.00'),
            dateAdhesion=timezone.now(),
            statut='actif'
        )
        
        # Cr√©er des cotisations pour donner un solde
        for i in range(5):  # 5 cotisations de 10000 FCFA = 50000 FCFA
            Cotisation.objects.create(
                client=self.client,
                tontine=self.tontine,
                montant=Decimal('10000.00'),
                statut='confirmee',
                numero_transaction=f'SANDBOX_COT_{i:03d}'
            )
        
        # Cr√©er le solde tontine
        self.solde_tontine = SoldeTontine.objects.create(
            client=self.client,
            tontine=self.tontine,
            solde=Decimal('50000.00')
        )
        
        print(f"‚úÖ Donn√©es configur√©es - Client: {self.client.telephone}, Solde: {self.solde_tontine.solde} FCFA")
    
    def test_workflow_retrait_kkiapay_sandbox_reel(self):
        """
        Test complet avec le vrai sandbox KKiaPay
        ATTENTION: Ce test n√©cessite une interaction manuelle via l'interface HTML
        """
        print("\nüöÄ === TEST RETRAIT KKIAPAY SANDBOX R√âEL ===")
        
        # √âTAPE 1: Cr√©er une demande de retrait
        montant_retrait = Decimal('25000.00')
        retrait = Retrait.objects.create(
            client=self.client,
            tontine=self.tontine,
            montant=montant_retrait
        )
        
        print(f"üìù √âTAPE 1: Demande de retrait cr√©√©e")
        print(f"   - ID: {retrait.id}")
        print(f"   - Montant: {montant_retrait} FCFA")
        print(f"   - Client: {self.client.nom} {self.client.prenom}")
        print(f"   - T√©l√©phone: {self.client.telephone}")
        
        # √âTAPE 2: Validation par l'agent
        retrait.approuver(
            agent=self.agent_sfd,
            commentaires="Retrait approuv√© pour test KKiaPay sandbox"
        )
        
        print(f"‚úÖ √âTAPE 2: Retrait approuv√© par {self.agent_sfd.nom}")
        
        # √âTAPE 3: Cr√©er la transaction KKiaPay
        transaction_kkia = KKiaPayTransaction.objects.create(
            reference_tontiflex=f"RETRAIT_KKIA_SANDBOX_{retrait.id}",
            type_transaction='retrait_tontine',
            status='pending',
            montant=montant_retrait,
            devise='XOF',
            user=self.client.user,
            numero_telephone=self.client.telephone,
            description=f"Retrait sandbox - {self.tontine.nom} - {self.client.nom}"
        )
        
        print(f"üí≥ √âTAPE 3: Transaction KKiaPay cr√©√©e")
        print(f"   - R√©f√©rence: {transaction_kkia.reference_tontiflex}")
        print(f"   - Montant: {transaction_kkia.montant} {transaction_kkia.devise}")
        
        # √âTAPE 4: G√©n√©rer les informations pour le widget KKiaPay
        widget_config = {
            'public_key': 'd1297c10527a11f0a266e50dce82524c',
            'amount': int(montant_retrait),  # KKiaPay attend un entier
            'sandbox': True,
            'phone': self.client.telephone,
            'callback': f'http://localhost:8000/api/payments/webhook/retrait/{retrait.id}/',
            'theme': '#28a745',  # Vert pour les retraits
            'description': transaction_kkia.description
        }
        
        print(f"üé® √âTAPE 4: Configuration widget KKiaPay g√©n√©r√©e")
        print(f"   - Cl√© publique: {widget_config['public_key'][:20]}...")
        print(f"   - Mode sandbox: {widget_config['sandbox']}")
        print(f"   - T√©l√©phone: {widget_config['phone']}")
        print(f"   - Callback: {widget_config['callback']}")
        
        # √âTAPE 5: Sauvegarder les donn√©es pour l'interface HTML
        test_data = {
            'retrait_id': str(retrait.id),
            'transaction_id': str(transaction_kkia.id),
            'widget_config': widget_config,
            'client_info': {
                'nom': self.client.nom,
                'prenom': self.client.prenom,
                'telephone': self.client.telephone
            },
            'tontine_info': {
                'nom': self.tontine.nom,
                'solde_client': str(self.solde_tontine.solde)
            }
        }
        
        # √âcrire dans un fichier pour l'interface HTML
        import os
        test_data_file = os.path.join(
            os.path.dirname(__file__), 
            'test_retrait_sandbox_data.json'
        )
        
        with open(test_data_file, 'w', encoding='utf-8') as f:
            json.dump(test_data, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ √âTAPE 5: Donn√©es sauvegard√©es dans {test_data_file}")
        
        # √âTAPE 6: Instructions pour le test manuel
        print("\n" + "="*80)
        print("üéØ INSTRUCTIONS POUR LE TEST MANUEL:")
        print("="*80)
        print(f"1. Ouvrir le fichier HTML: test_retrait_kkiapay_sandbox.html")
        print(f"2. Le widget KKiaPay s'ouvrira automatiquement")
        print(f"3. Utiliser le num√©ro de test: {self.client.telephone}")
        print(f"4. Montant √† payer: {montant_retrait} FCFA")
        print(f"5. Mode sandbox activ√© - transaction fictive")
        print(f"6. Apr√®s paiement, v√©rifier le webhook et le statut")
        print("="*80)
        
        # Cr√©er les assertions de base
        self.assertEqual(retrait.statut, Retrait.StatutRetraitChoices.APPROVED)
        self.assertEqual(transaction_kkia.status, 'pending')
        self.assertEqual(transaction_kkia.montant, montant_retrait)
        self.assertTrue(transaction_kkia.reference_tontiflex.startswith('RETRAIT_KKIA_SANDBOX_'))
        
        # Retourner les donn√©es pour d'autres tests
        return {
            'retrait': retrait,
            'transaction_kkia': transaction_kkia,
            'widget_config': widget_config,
            'test_data_file': test_data_file
        }
    
    def test_verification_transaction_kkiapay_sdk(self):
        """
        Test de v√©rification d'une transaction avec le SDK Python KKiaPay
        
        NOTE: Ce test n√©cessite une transaction_id r√©elle du sandbox
        """
        print("\nüîç === TEST V√âRIFICATION SDK KKIAPAY ===")
        
        # Transaction ID de test (remplacer par une vraie apr√®s paiement)
        test_transaction_id = "sandbox_test_transaction_id"
        
        try:
            # V√©rifier la transaction avec le SDK
            transaction_info = self.kkiapay.verify_transaction(test_transaction_id)
            
            print(f"‚úÖ Transaction v√©rifi√©e:")
            print(f"   - ID: {transaction_info.transactionId}")
            print(f"   - Statut: {transaction_info.status}")
            print(f"   - Montant: {transaction_info.amount}")
            print(f"   - Frais: {transaction_info.fees}")
            print(f"   - Source: {transaction_info.source}")
            print(f"   - Date: {transaction_info.performedAt}")
            
            # Assertions
            self.assertIsNotNone(transaction_info)
            self.assertEqual(transaction_info.transactionId, test_transaction_id)
            
        except Exception as e:
            print(f"‚ÑπÔ∏è  Transaction de test non trouv√©e (normal): {e}")
            # Ce n'est pas une erreur car on utilise un ID de test
            self.assertTrue(True)
    
    def test_numeros_test_officiels_kkiapay(self):
        """
        Test avec les num√©ros de t√©l√©phone officiels de KKiaPay sandbox
        """
        print("\nüì± === TEST NUM√âROS OFFICIELS KKIAPAY ===")
        
        # Num√©ros de test officiels selon la documentation
        numeros_test = {
            'mtn_benin_success': '+22961000000',  # MTN B√©nin - Succ√®s
            'mtn_benin_failed': '+22961000001',   # MTN B√©nin - √âchec
            'mtn_ci_success': '+22507000000',     # MTN C√¥te d'Ivoire - Succ√®s
            'mtn_ci_failed': '+22507000001',      # MTN C√¥te d'Ivoire - √âchec
            'moov_success': '+22966000000',       # Moov - Succ√®s
            'moov_failed': '+22966000001',        # Moov - √âchec
        }
        
        for scenario, numero in numeros_test.items():
            print(f"üìû {scenario}: {numero}")
            
            # Cr√©er un client de test pour ce num√©ro
            client_test = Client.objects.create(
                user=User.objects.create_user(
                    email=f'{scenario}@test.com',
                    username=f'test_{scenario}',
                    password='testpass123'
                ),
                nom="Test",
                prenom=scenario.replace('_', ' ').title(),
                telephone=numero,
                email=f'{scenario}@test.com',
                adresse="Adresse test",
                profession="Test",
                motDePasse="test"
            )
            
            # V√©rifier le format du num√©ro
            self.assertTrue(numero.startswith('+'))
            self.assertTrue(len(numero) >= 12)
            
            print(f"   ‚úÖ Client cr√©√©: {client_test.nom} {client_test.prenom}")
        
        print(f"üìä Total num√©ros test√©s: {len(numeros_test)}")
    
    def test_generation_widget_config_complet(self):
        """
        Test de g√©n√©ration d'une configuration compl√®te pour le widget KKiaPay
        """
        print("\n‚öôÔ∏è  === TEST CONFIGURATION WIDGET ===")
        
        # Cr√©er un retrait de test
        retrait = Retrait.objects.create(
            client=self.client,
            tontine=self.tontine,
            montant=Decimal('15000.00')
        )
        
        # Configuration compl√®te du widget
        config = {
            # Configuration de base
            'key': 'd1297c10527a11f0a266e50dce82524c',
            'amount': int(retrait.montant),
            'sandbox': True,
            
            # Informations client
            'phone': self.client.telephone,
            'email': self.client.email,
            'name': f"{self.client.prenom} {self.client.nom}",
            
            # Configuration UI
            'position': 'center',
            'theme': '#dc3545',  # Rouge pour les retraits
            'paymentmethod': 'momo',  # Mobile Money uniquement
            
            # M√©tadonn√©es
            'data': json.dumps({
                'retrait_id': str(retrait.id),
                'tontine_id': str(self.tontine.id),
                'client_id': str(self.client.id),
                'type': 'retrait_tontine'
            }),
            
            # URLs de callback
            'callback': f'http://localhost:8000/payments/success/{retrait.id}/',
            'webhookurl': f'http://localhost:8000/api/payments/webhook/retrait/{retrait.id}/',
            
            # Localisation
            'description': f"Retrait tontine {self.tontine.nom}",
            'label': f"Retrait de {retrait.montant} FCFA"
        }
        
        print("üé® Configuration widget g√©n√©r√©e:")
        for key, value in config.items():
            if key == 'key':
                print(f"   - {key}: {str(value)[:20]}...")
            else:
                print(f"   - {key}: {value}")
        
        # V√©rifications
        self.assertEqual(config['amount'], 15000)
        self.assertTrue(config['sandbox'])
        self.assertEqual(config['phone'], '+22961000000')
        self.assertEqual(config['paymentmethod'], 'momo')
        
        # V√©rifier les m√©tadonn√©es
        data = json.loads(config['data'])
        self.assertEqual(data['retrait_id'], str(retrait.id))
        self.assertEqual(data['type'], 'retrait_tontine')
        
        print("‚úÖ Configuration widget valid√©e")
        
        return config
    
    def tearDown(self):
        """Nettoyage apr√®s chaque test"""
        print("üßπ Nettoyage des donn√©es de test...")
        super().tearDown()


class TestWebhookKKiaPayRetrait(TestCase):
    """
    Tests pour les webhooks KKiaPay des retraits
    """
    
    def test_webhook_retrait_success(self):
        """Test du webhook pour un retrait r√©ussi"""
        print("\nüîî === TEST WEBHOOK RETRAIT SUCC√àS ===")
        
        # Donn√©es de webhook simul√©es selon la doc KKiaPay
        webhook_data = {
            "transactionId": "test_sandbox_12345",
            "isPaymentSucces": True,
            "account": "22961000000",
            "label": "Retrait tontine test",
            "method": "MOBILE_MONEY",
            "amount": 25000,
            "fees": 375,  # 1.5% de 25000
            "partnerId": "your_partner_id",
            "performedAt": "2024-12-27T10:30:00.000Z",
            "stateData": {
                "retrait_id": "test_retrait_id",
                "tontine_id": "test_tontine_id"
            },
            "event": "transaction.success"
        }
        
        print(f"üì® Webhook re√ßu:")
        print(f"   - Transaction ID: {webhook_data['transactionId']}")
        print(f"   - Succ√®s: {webhook_data['isPaymentSucces']}")
        print(f"   - Montant: {webhook_data['amount']} FCFA")
        print(f"   - Frais: {webhook_data['fees']} FCFA")
        print(f"   - M√©thode: {webhook_data['method']}")
        print(f"   - Compte: {webhook_data['account']}")
        
        # V√©rifications
        self.assertTrue(webhook_data['isPaymentSucces'])
        self.assertEqual(webhook_data['event'], 'transaction.success')
        self.assertEqual(webhook_data['method'], 'MOBILE_MONEY')
        self.assertEqual(webhook_data['amount'], 25000)
        
        print("‚úÖ Webhook de succ√®s valid√©")
    
    def test_webhook_retrait_failed(self):
        """Test du webhook pour un retrait √©chou√©"""
        print("\n‚ùå === TEST WEBHOOK RETRAIT √âCHEC ===")
        
        # Donn√©es de webhook d'√©chec
        webhook_data = {
            "transactionId": "test_sandbox_failed_67890",
            "isPaymentSucces": False,
            "account": "22961000001",  # Num√©ro de test pour √©chec
            "failureCode": "insufficient_funds",
            "failureMessage": "Solde insuffisant",
            "label": "Retrait tontine test - √©chec",
            "method": "MOBILE_MONEY",
            "amount": 50000,
            "fees": 0,
            "partnerId": "your_partner_id",
            "performedAt": "2024-12-27T10:35:00.000Z",
            "stateData": {
                "retrait_id": "test_retrait_failed_id"
            },
            "event": "transaction.failed"
        }
        
        print(f"üí• Webhook d'√©chec re√ßu:")
        print(f"   - Transaction ID: {webhook_data['transactionId']}")
        print(f"   - Succ√®s: {webhook_data['isPaymentSucces']}")
        print(f"   - Code d'erreur: {webhook_data['failureCode']}")
        print(f"   - Message: {webhook_data['failureMessage']}")
        print(f"   - Compte: {webhook_data['account']}")
        
        # V√©rifications
        self.assertFalse(webhook_data['isPaymentSucces'])
        self.assertEqual(webhook_data['event'], 'transaction.failed')
        self.assertEqual(webhook_data['failureCode'], 'insufficient_funds')
        self.assertIn('insuffisant', webhook_data['failureMessage'])
        
        print("‚úÖ Webhook d'√©chec valid√©")


if __name__ == "__main__":
    # Instructions pour lancer les tests
    print("üß™ Pour lancer les tests KKiaPay Sandbox:")
    print("1. Installer le SDK: pip install kkiapay")
    print("2. Configurer vos cl√©s KKiaPay sandbox dans settings.py")
    print("3. Lancer: python manage.py test tontines.test_retrait_kkiapay_sandbox")
    print("4. Ouvrir test_retrait_kkiapay_sandbox.html pour l'interface")
