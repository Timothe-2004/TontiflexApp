# Cr√©er ce fichier: check_mobile_money.py
import os
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tontiflex.settings')
django.setup()

from mobile_money.models import OperateurMobileMoney, TransactionMobileMoney
from accounts.models import Client
from tontines.models import Tontine, Adhesion, Cotisation
from django.db import connection

def check_mobile_money_status():
    print("=" * 60)
    print("√âTAT DU SYST√àME MOBILE MONEY")
    print("=" * 60)
    
    # 1. V√©rifier les op√©rateurs configur√©s
    operateurs = OperateurMobileMoney.objects.all()
    print(f"\nüì± OP√âRATEURS CONFIGUR√âS ({operateurs.count()}):")
    for op in operateurs:
        print(f"  - {op.nom} ({op.code})")
        print(f"    Pr√©fixes: {op.prefixes_telephone}")
        print(f"    API URL: {op.api_base_url}")
        print(f"    Frais: {op.frais_pourcentage}% + {op.frais_fixe} FCFA")
        print(f"    Limites: {op.montant_minimum} - {op.montant_maximum} FCFA")
        print()
    
    # 2. V√©rifier les transactions
    transactions = TransactionMobileMoney.objects.all()
    print(f"üí≥ TRANSACTIONS MOBILE MONEY ({transactions.count()}):")
    for trans in transactions[:10]:  # Afficher les 10 derni√®res
        print(f"  - {trans.numero_transaction} | {trans.montant} FCFA")
        print(f"    {trans.operateur.nom} | Statut: {trans.statut}")
        print(f"    Client: {trans.client} | Date: {trans.date_creation}")
        print()
    
    # 3. V√©rifier les adh√©sions avec paiement
    adhesions = Adhesion.objects.filter(
        operateur_mobile_money__isnull=False
    )
    print(f"ü§ù ADH√âSIONS AVEC MOBILE MONEY ({adhesions.count()}):")
    for adh in adhesions[:5]:
        print(f"  - Client: {adh.client}")
        print(f"    Tontine: {adh.tontine.nom}")
        print(f"    Montant: {adh.montant_mise} FCFA")
        print(f"    Op√©rateur: {adh.operateur_mobile_money}")
        print(f"    T√©l√©phone: {adh.numero_telephone_paiement}")
        print(f"    Statut: {adh.statut_actuel}")
        print()
    
    # 4. V√©rifier les cotisations
    cotisations = Cotisation.objects.all()
    print(f"üí∞ COTISATIONS ({cotisations.count()}):")
    for cot in cotisations[:5]:
        print(f"  - Client: {cot.client}")
        print(f"    Montant: {cot.montant} FCFA")
        print(f"    Statut: {cot.statut}")
        print(f"    Transaction: {cot.numero_transaction}")
        print()

def check_database_tables():
    print("=" * 60)
    print("TABLES DE LA BASE DE DONN√âES")
    print("=" * 60)
    
    with connection.cursor() as cursor:
        # Lister toutes les tables
        cursor.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name NOT LIKE 'django_%' 
            ORDER BY name;
        """)
        tables = cursor.fetchall()
        
        print("üìä TABLES PRINCIPALES:")
        for table in tables:
            table_name = table[0]
            cursor.execute(f"SELECT COUNT(*) FROM {table_name}")
            count = cursor.fetchone()[0]
            print(f"  - {table_name}: {count} enregistrements")

def test_mobile_money_integration():
    print("=" * 60)
    print("TEST D'INT√âGRATION MOBILE MONEY")
    print("=" * 60)
    
    # V√©rifier si les API keys sont configur√©es
    from django.conf import settings
    
    mobile_money_settings = getattr(settings, 'MOBILE_MONEY', {})
    print("üîë CONFIGURATION MOBILE MONEY:")
    
    if mobile_money_settings:
        for operator, config in mobile_money_settings.items():
            print(f"  {operator}:")
            for key, value in config.items():
                # Masquer les cl√©s sensibles
                if 'key' in key.lower() or 'secret' in key.lower():
                    value = '*' * len(str(value)) if value else 'NON CONFIGUR√â'
                print(f"    {key}: {value}")
    else:
        print("  ‚ö†Ô∏è  Configuration Mobile Money non trouv√©e dans settings.py")
    
    # V√©rifier les vues Mobile Money
    print("\nüîó URLS MOBILE MONEY DISPONIBLES:")
    try:
        from django.urls import reverse
        mobile_money_urls = [
            'transaction-list',
            'transaction-detail',
            'operateur-list',
        ]
        
        for url_name in mobile_money_urls:
            try:
                url = reverse(url_name)
                print(f"  ‚úÖ {url_name}: {url}")
            except:
                print(f"  ‚ùå {url_name}: Non configur√©")
    except Exception as e:
        print(f"  ‚ö†Ô∏è  Erreur lors de la v√©rification des URLs: {e}")

if __name__ == "__main__":
    print("üöÄ DIAGNOSTIC COMPLET DU SYST√àME TONTIFLEX")
    print()
    
    try:
        check_mobile_money_status()
        print()
        check_database_tables()
        print()
        test_mobile_money_integration()
        
        print("\n" + "=" * 60)
        print("RECOMMANDATIONS:")
        print("=" * 60)
        print("1. V√©rifiez les API keys dans settings.py")
        print("2. Testez les endpoints Mobile Money avec Postman")
        print("3. Consultez les logs pour les erreurs d'int√©gration")
        print("4. Utilisez Django Admin pour voir les donn√©es")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du diagnostic: {e}")
        import traceback
        traceback.print_exc()