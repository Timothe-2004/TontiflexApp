#!/usr/bin/env python
"""
Script de test KKiaPay SANDBOX pour TontiFlex - IMPORTS CORRIG√âS
================================================================

Test la configuration KKiaPay selon la documentation officielle:
https://docs.kkiapay.me/v1/compte/kkiapay-sandbox-guide-de-test

USAGE:
    python test_kkiapay_sandbox_fixed.py
"""
import os
import sys
import django

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'tontiflex.settings')
django.setup()

from django.contrib.auth import get_user_model
from decimal import Decimal
import logging

# ‚úÖ IMPORTS ABSOLUS (pas relatifs)
from payments.config import kkiapay_config
from payments.models import KKiaPayTransaction

# Configuration du logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

User = get_user_model()


class KKiaPayArchitectureTest:
    def test_verify_transaction_id(self, transaction_id):
        """Test de v√©rification d'une transaction KKIAPAY existante (SANDBOX)"""
        from kkiapay import Kkiapay
        print("\n" + "="*70)
        print("üîé TEST: V√âRIFICATION TRANSACTION KKIAPAY (SANDBOX)")
        print("="*70)
        try:
            k = Kkiapay(
                kkiapay_config.public_key,
                kkiapay_config.private_key,
                kkiapay_config.secret_key,
                sandbox=True
            )
            result = k.verify_transaction(transaction_id)
            print(f"üìã Statut de la transaction: {result}")
            return result
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {e}")
            return None
    def test_6_initiate_and_verify_payment_sandbox(self):
        """Test 6: Initiation d'un paiement via l'API REST SANDBOX, v√©rification et enregistrement"""
        import requests
        from kkiapay import Kkiapay
        print("\n" + "="*70)
        print("üí∏ TEST 6: INITIATION & V√âRIFICATION PAIEMENT KKIAPAY (SANDBOX)")
        print("="*70)

        # Utilisation d'un num√©ro de test officiel (succ√®s imm√©diat)
        phone = self.test_numbers['mtn_benin_success']
        amount = 1000
        reason = "Test SANDBOX TontiFlex"
        callback_url = getattr(kkiapay_config, 'webhook_url', None)

        url = "https://api-sandbox.kkiapay.me/api/v1/transactions/initiate"
        headers = {
            "Content-Type": "application/json",
            "Authorization": f"Bearer {kkiapay_config.public_key}"
        }
        data = {
            "amount": amount,
            "phone": phone,
            "reason": reason,
        }
        if callback_url:
            data["callback"] = callback_url

        print(f"‚û°Ô∏è  Initiation du paiement SANDBOX pour {amount} FCFA, {phone}")
        try:
            response = requests.post(url, json=data, headers=headers, timeout=15)
            response.raise_for_status()
            result = response.json()
            print(f"‚úÖ Paiement initi√©: {result}")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'initiation: {e}")
            return False

        transaction_id = result.get("transactionId") or result.get("transaction_id")
        if not transaction_id:
            print("‚ùå transactionId manquant dans la r√©ponse")
            return False

        # V√©rification de la transaction via SDK Python
        print(f"üîé V√©rification de la transaction {transaction_id} via SDK Python...")
        try:
            k = Kkiapay(
                kkiapay_config.public_key,
                kkiapay_config.private_key,
                kkiapay_config.secret_key,
                sandbox=True
            )
            verification = k.verify_transaction(transaction_id)
            print(f"üìã Statut de la transaction: {verification}")
        except Exception as e:
            print(f"‚ùå Erreur lors de la v√©rification: {e}")
            return False

        # Enregistrement dans la base
        try:
            tx = KKiaPayTransaction.objects.create(
                user=self.test_user,
                reference_tontiflex=transaction_id,
                montant=amount,
                status=verification.get('status', 'pending'),
                phone=phone
            )
            print(f"üíæ Transaction enregistr√©e: {tx}")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'enregistrement DB: {e}")
            return False

        print("‚úÖ Test SANDBOX complet: initiation, v√©rification, enregistrement OK")
        return True
    """
    Test de l'architecture KKiaPay CORRECTE
    
    Ce test v√©rifie que l'architecture respecte le SDK Python officiel
    qui ne contient QUE verify_transaction() et refund_transaction()
    """
    
    def __init__(self):
        self.test_user = self._get_or_create_test_user()
        
        # Num√©ros de test OFFICIELS selon la documentation
        self.test_numbers = {
            # MTN B√©nin - NUM√âROS OFFICIELS
            'mtn_benin_success': '+229 ',     # Succ√®s imm√©diat
            'mtn_benin_success2': '+22997000000',    # Succ√®s imm√©diat alternatif
            'mtn_benin_delayed': '+22961100000',     # Succ√®s avec d√©lai 1 min
            'mtn_benin_error': '+22961000001',       # Processing error
            'mtn_benin_insufficient': '+22961000002', # Insufficient fund
            'mtn_benin_declined': '+22961000003',    # Payment declined
            
            # MOOV - NUM√âROS OFFICIELS  
            'moov_success': '+22968000000',          # Succ√®s imm√©diat
            'moov_success2': '+22995000000',         # Succ√®s imm√©diat alternatif
            'moov_delayed': '+22968100000',          # Succ√®s avec d√©lai 1 min
            'moov_error': '+22968000001',            # Processing error
            'moov_insufficient': '+22968000002',     # Insufficient fund
            'moov_declined': '+22968000003',         # Payment declined
            
            # MTN C√¥te d'Ivoire - NUM√âROS OFFICIELS
            'mtn_ci_success': '+2250577100000',      # Succ√®s imm√©diat
            'mtn_ci_delayed': '+2250577110000',      # Succ√®s avec d√©lai 1 min
            'mtn_ci_error': '+2250577100001',        # Processing error
        }
    
    def _get_or_create_test_user(self):
        """Cr√©e ou r√©cup√®re un utilisateur de test"""
        try:
            user = User.objects.get(username='test_kkiapay')
        except User.DoesNotExist:
            user = User.objects.create_user(
                username='test_kkiapay',
                email='test@kkiapay.tontiflex.com',
                password='test123'
            )
            logger.info("üë§ Utilisateur de test cr√©√©: test_kkiapay")
        
        return user
    
    def test_1_configuration(self):
        """Test 1: Configuration KKiaPay"""
        print("\n" + "="*70)
        print("üîß TEST 1: CONFIGURATION KKIAPAY")
        print("="*70)
        
        print(f"üåç Mode: {'SANDBOX' if kkiapay_config.sandbox else 'LIVE'}")
        print(f"üîë Public Key: {kkiapay_config.public_key[:20]}..." if kkiapay_config.public_key else "‚ùå Manquante")
        print(f"üîê Private Key: {kkiapay_config.private_key[:20]}..." if kkiapay_config.private_key else "‚ùå Manquante")
        print(f"üõ°Ô∏è Secret Key: {kkiapay_config.secret_key[:20]}..." if kkiapay_config.secret_key else "‚ùå Manquante")
        print(f"üåê API URL: {kkiapay_config.base_url}")
        
        # Validation des cl√©s (accepter tout format valide)
        issues = []
        
        # V√©rification simple de la pr√©sence et longueur des cl√©s
        if not kkiapay_config.public_key or len(kkiapay_config.public_key) < 20:
            issues.append("‚ùå Public Key manquante ou trop courte")
            
        if not kkiapay_config.private_key or len(kkiapay_config.private_key) < 20:
            issues.append("‚ùå Private Key manquante ou trop courte")
            
        if not kkiapay_config.secret_key or len(kkiapay_config.secret_key) < 20:
            issues.append("‚ùå Secret Key manquante ou trop courte")
        
        if issues:
            print("\nüö® PROBL√àMES DE CONFIGURATION D√âTECT√âS:")
            for issue in issues:
                print(f"  {issue}")
            print("\nüí° SOLUTION:")
            print("  1. Allez sur https://app.kkiapay.me/dashboard")
            print("  2. Section D√©veloppeurs > Cl√©s API")
            print("  3. V√©rifiez le mode SANDBOX")
            print("  4. R√©g√©n√©rez les cl√©s si n√©cessaire")
            print("  5. Mettez √† jour votre fichier .env")
            return False
        
        if kkiapay_config.is_configured():
            print("‚úÖ Configuration compl√®te et valide")
            return True
        else:
            print("‚ùå Configuration incompl√®te")
            return False
    
    def test_2_sdk_python_officiel(self):
        """Test 2: SDK Python officiel (verify_transaction uniquement)"""
        print("\n" + "="*70)
        print("üêç TEST 2: SDK PYTHON OFFICIEL")
        print("="*70)
        
        try:
            # Import du SDK Python officiel
            from kkiapay import Kkiapay
            
            # Initialisation avec vos cl√©s
            k = Kkiapay(
                kkiapay_config.public_key,
                kkiapay_config.private_key,
                kkiapay_config.secret_key,
                sandbox=kkiapay_config.sandbox
            )
            
            print("‚úÖ SDK Python officiel initialis√©")
            print(f"üì¶ M√©thodes disponibles: verify_transaction, refund_transaction")
            print(f"‚ùå M√©thode initiate_payment: N'EXISTE PAS dans le SDK officiel")
            
            # Test avec un ID fictif pour voir le comportement
            try:
                response = k.verify_transaction('test_id_fictif')
                print(f"üìã R√©ponse: {response}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erreur attendue pour ID fictif: {str(e)[:100]}...")
                print("‚úÖ Le SDK Python fonctionne correctement")
            
            return True
            
        except ImportError as e:
            print(f"‚ùå Erreur import SDK: {e}")
            print("üí° Installez le SDK: pip install kkiapay")
            return False
        except Exception as e:
            print(f"‚ùå Erreur SDK: {e}")
            return False
    
    def test_3_architecture_frontend_needed(self):
        """Test 3: Explication de l'architecture correcte"""
        print("\n" + "="*70)
        print("üåê TEST 3: ARCHITECTURE CORRECTE REQUISE")
        print("="*70)
        
        print("üìã ARCHITECTURE OFFICIELLE KKIAPAY:")
        print("  1. üñ•Ô∏è  FRONTEND (JavaScript): Initie les paiements")
        print("     ‚Ä¢ Widget KKiaPay avec openKkiapayWidget()")
        print("     ‚Ä¢ Num√©ros de test officiels")
        print("     ‚Ä¢ Gestion des √©v√©nements success/failed")
        print()
        print("  2. üêç  BACKEND (Python): V√©rifie les transactions")
        print("     ‚Ä¢ SDK Python: verify_transaction() uniquement")
        print("     ‚Ä¢ Webhooks: R√©ception des notifications")
        print("     ‚Ä¢ Base de donn√©es: Stockage des statuts")
        print()
        print("‚ùå PROBL√àME ACTUEL:")
        print("  ‚Ä¢ Votre code essaie d'initier des paiements depuis Python")
        print("  ‚Ä¢ La m√©thode initiate_payment() n'existe pas dans le SDK")
        print("  ‚Ä¢ C'est pourquoi vous avez l'erreur 404 Not Found")
        print()
        print("‚úÖ SOLUTION:")
        print("  ‚Ä¢ Utilisez le widget JavaScript pour initier les paiements")
        print("  ‚Ä¢ Utilisez Python uniquement pour v√©rifier")
        
        return True
    
    def test_4_widget_javascript_example(self):
        """Test 4: Exemple de widget JavaScript"""
        print("\n" + "="*70)
        print("üì± TEST 4: EXEMPLE WIDGET JAVASCRIPT")
        print("="*70)
        
        print("üí° VOICI COMMENT UTILISER KKIAPAY CORRECTEMENT:")
        print()
        print("<!-- Dans votre template HTML -->")
        print('<script src="https://cdn.kkiapay.me/k.js"></script>')
        print()
        print("<script>")
        print("// Initier un paiement avec un num√©ro de test officiel")
        print("function testerPaiementKKiaPay() {")
        print("    openKkiapayWidget({")
        print(f"        amount: 1000,")
        print(f"        key: '{kkiapay_config.public_key}',")
        print(f"        sandbox: {str(kkiapay_config.sandbox).lower()},")
        print(f"        phone: '{self.test_numbers['mtn_benin_success']}',  // Num√©ro officiel")
        print(f"        callback: '{kkiapay_config.webhook_url}',")
        print("        description: 'Test SANDBOX TontiFlex'")
        print("    });")
        print("    ")
        print("    // √âcouter les √©v√©nements")
        print("    addSuccessListener(response => {")
        print("        console.log('Paiement r√©ussi:', response);")
        print("    });")
        print("    ")
        print("    addFailedListener(error => {")
        print("        console.log('Paiement √©chou√©:', error);")
        print("    });")
        print("}")
        print("</script>")
        print()
        print("üéØ AVEC CETTE M√âTHODE:")
        print("  ‚úÖ Les paiements fonctionneront")
        print("  ‚úÖ Les num√©ros de test officiels marcheront")
        print("  ‚úÖ Vous recevrez les webhooks")
        print("  ‚úÖ Votre backend Python pourra v√©rifier les transactions")
        
        return True
    
    def test_5_database_transactions(self):
        """Test 5: √âtat des transactions en base"""
        print("\n" + "="*70)
        print("üíæ TEST 5: TRANSACTIONS EN BASE DE DONN√âES")
        print("="*70)
        
        try:
            # Compter les transactions existantes
            total_transactions = KKiaPayTransaction.objects.count()
            pending_transactions = KKiaPayTransaction.objects.filter(status='pending').count()
            success_transactions = KKiaPayTransaction.objects.filter(status='success').count()
            failed_transactions = KKiaPayTransaction.objects.filter(status='failed').count()
            
            print(f"üìä Total transactions: {total_transactions}")
            print(f"‚è≥ En attente: {pending_transactions}")
            print(f"‚úÖ R√©ussies: {success_transactions}")
            print(f"‚ùå √âchou√©es: {failed_transactions}")
            
            if total_transactions > 0:
                print("\nüìã Derni√®res transactions:")
                recent = KKiaPayTransaction.objects.order_by('-created_at')[:3]
                for tx in recent:
                    print(f"  ‚Ä¢ {tx.reference_tontiflex} - {tx.status} - {tx.montant} FCFA")
            else:
                print("üìù Aucune transaction en base (normal pour le premier test)")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur base de donn√©es: {e}")
            return False
    
    def run_all_tests(self):
        """Ex√©cute tous les tests d'architecture"""
        print("üß™ TEST ARCHITECTURE KKIAPAY CORRECTE")
        print("Documentation: https://docs.kkiapay.me/v1/compte/kkiapay-sandbox-guide-de-test")
        print("="*80)
        
        # Tests s√©quentiels
        results = []
        results.append(self.test_1_configuration())
        results.append(self.test_2_sdk_python_officiel())
        results.append(self.test_3_architecture_frontend_needed())
        results.append(self.test_4_widget_javascript_example())
        results.append(self.test_5_database_transactions())
        results.append(self.test_6_initiate_and_verify_payment_sandbox())
        # R√©sum√© final
        self.display_final_summary(results)
    
    def display_final_summary(self, results):
        """Affichage du r√©sum√© final"""
        print("\n" + "="*80)
        print("üìà R√âSUM√â FINAL - ARCHITECTURE KKIAPAY")
        print("="*80)
        
        passed_tests = sum(results)
        total_tests = len(results)
        
        print(f"üìä Tests d'architecture: {passed_tests}/{total_tests} r√©ussis")
        
        if all(results):
            print("\n‚úÖ ARCHITECTURE PR√äTE POUR IMPL√âMENTATION")
            print("üéØ Prochaines √©tapes:")
            print("  1. üîß Impl√©mentez le widget JavaScript dans votre frontend")
            print("  2. üß™ Testez avec les num√©ros officiels via le widget")
            print("  3. üì° Configurez les webhooks")
            print("  4. üêç Utilisez Python uniquement pour verify_transaction()")
            print("  5. üöÄ Une fois valid√© en SANDBOX, passez en LIVE")
        else:
            print("\n‚ö†Ô∏è PROBL√àMES √Ä CORRIGER AVANT IMPL√âMENTATION")
            print("üîç V√©rifiez:")
            print("  ‚Ä¢ Configuration des cl√©s API sur le dashboard KKiaPay")
            print("  ‚Ä¢ Format des cl√©s (pk_sandbox_, tpk_, tsk_)")
            print("  ‚Ä¢ Mode SANDBOX activ√©")
            print("  ‚Ä¢ Installation du SDK Python: pip install kkiapay")
        
        print("\nüìö Documentation officielle:")
        print("  ‚Ä¢ Guide SANDBOX: https://docs.kkiapay.me/v1/compte/kkiapay-sandbox-guide-de-test")
        print("  ‚Ä¢ SDK JavaScript: https://docs.kkiapay.me/v1/plugin-et-sdk/sdk-javascript")
        print("  ‚Ä¢ SDK Python: https://github.com/PythonBenin/kkiapay-python")
        print("  ‚Ä¢ Dashboard: https://app.kkiapay.me/dashboard")
        
        print(f"\nüéØ CONCLUSION:")
        if all(results):
            print("‚úÖ Votre configuration est correcte")
            print("‚úÖ Impl√©mentez l'architecture JavaScript + Python")
            print("‚úÖ Vous pourrez alors passer en production")
        else:
            print("‚ùå Corrigez d'abord la configuration")
            print("‚ùå Puis impl√©mentez l'architecture correcte")
            print("‚ùå Le projet n'est pas encore pr√™t pour production")


def main():
    """Point d'entr√©e principal"""
    print("üîç V√©rification de l'environnement Django...")
    
    # V√©rification que nous sommes en mode SANDBOX
    if not kkiapay_config.sandbox:
        print("‚ùå ERREUR: Ce script ne fonctionne qu'en mode SANDBOX")
        print("   V√©rifiez que KKIAPAY_SANDBOX=True dans votre fichier .env")
        sys.exit(1)
    
    print("‚úÖ Mode SANDBOX confirm√© - D√©marrage des tests d'architecture")
    
    # Lancement des tests
    tester = KKiaPayArchitectureTest()
    tester.run_all_tests()


if __name__ == '__main__':
    main()