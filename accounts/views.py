from django.shortcuts import render
from rest_framework import status, viewsets, permissions
from rest_framework.views import APIView
from rest_framework.response import Response
from rest_framework.decorators import action
from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView
from drf_spectacular.utils import (
    extend_schema, extend_schema_view, OpenApiExample, 
    OpenApiParameter, OpenApiResponse
)
from drf_spectacular.types import OpenApiTypes

from .serializers import (
    InscriptionSerializer,
    AgentSFDAdminSerializer,
    SuperviseurSFDAdminSerializer,
    AdministrateurSFDAdminSerializer,
    AdminPlateformeAdminSerializer,
    SFDSerializer,
    SFDDetailSerializer,
    # API REST Serializers
    ClientSerializer,
    AgentSFDSerializer,
    SuperviseurSFDSerializer,
    AdministrateurSFDSerializer,
    AdminPlateformeSerializer,
    LoginSerializer,
)
from .permissions import IsAdminPlateformeOrSuperuser
from .models import Client, AgentSFD, SuperviseurSFD, AdministrateurSFD, AdminPlateforme, SFD
from django.contrib.auth import get_user_model

User = get_user_model()

# Create your views here.

@extend_schema(
    tags=["üîê Authentification"],
    summary="Inscription d'un nouveau client",
    description="""
    Permet √† un visiteur (non connect√©) de cr√©er un compte CLIENT sur la plateforme TontiFlex.
    
    Cette inscription est la premi√®re √©tape pour qu'un citoyen puisse rejoindre des tontines et utiliser les services financiers digitalis√©s.
    
    **Processus m√©tier**:
    1. Le visiteur saisit ses informations personnelles
    2. Le syst√®me valide les donn√©es (unicit√© email/t√©l√©phone)
    3. Un compte CLIENT est cr√©√© automatiquement
    4. L'utilisateur peut ensuite se connecter et demander √† rejoindre des tontines
    
    **Donn√©es requises**:
    - Informations personnelles (nom, pr√©nom, t√©l√©phone, email)
    - Adresse et profession
    - Mot de passe s√©curis√©
    - Documents d'identit√© (pi√®ce d'identit√© et photo)
    
    **Validations effectu√©es**:
    - Email unique dans le syst√®me
    - Num√©ro de t√©l√©phone unique et valide
    - Formats des documents d'identit√©
    - Complexit√© du mot de passe
    
    **Permissions requises**: Aucune (endpoint public)
    **Conditions**: Aucune
    **Effets**: Cr√©ation d'un compte CLIENT actif, pr√™t pour l'authentification
    """,
    request=InscriptionSerializer,
    responses={
        201: OpenApiResponse(
            description="Inscription r√©ussie - Compte client cr√©√©",
            examples=[OpenApiExample(
                "Succ√®s inscription",
                value={"detail": "Inscription r√©ussie.", "client_id": 123}
            )]
        ),
        400: OpenApiResponse(
            description="Erreur de validation des donn√©es",
            examples=[OpenApiExample(
                "Erreur validation",
                value={
                    "email": ["Un utilisateur avec cet email existe d√©j√†."],
                    "telephone": ["Ce num√©ro de t√©l√©phone est d√©j√† utilis√©."],
                    "motDePasse": ["Le mot de passe doit contenir au moins 8 caract√®res."]
                }
            )]
        )
    },
    examples=[
        OpenApiExample(
            'Inscription client compl√®te',
            value={
                "nom": "Kouassi",
                "prenom": "Marie",
                "telephone": "+22967123456",
                "email": "marie.kouassi@email.com",
                "adresse": "Quartier Zongo, Cotonou",
                "profession": "Commer√ßante",
                "motDePasse": "MotDePasse123!",
                "pieceIdentite": "CNI123456789",
                "photoIdentite": "base64_encoded_photo_string"
            },
            request_only=True,
        )
    ]
)
class InscriptionAPIView(APIView):
    """
    POST /api/auth/inscription/
    Permet √† un visiteur de cr√©er un compte CLIENT.
    """
    permission_classes = [permissions.AllowAny]

    def post(self, request, *args, **kwargs):
        serializer = InscriptionSerializer(data=request.data)
        if serializer.is_valid():
            client = serializer.save()
            return Response({'detail': 'Inscription r√©ussie.'}, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

# --- Nouveaux ViewSets admin ---
@extend_schema_view(
    list=extend_schema(
        summary="Liste tous les agents SFD",
        description="""
        R√©cup√®re la liste compl√®te des agents SFD de toutes les structures financi√®res d√©centralis√©es.
        
        **R√¥le m√©tier**: Les agents SFD sont les employ√©s de terrain qui valident les documents des clients,
        approuvent les demandes de retrait et assurent le lien entre les clients et leur SFD.
        
        **Permissions requises**: Administrateur plateforme uniquement
        **Filtres disponibles**: Par SFD, par statut actif/inactif
        **Tri**: Par nom, date de cr√©ation, SFD
        """,
        responses={200: AgentSFDAdminSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un nouvel agent SFD",
        description="""
        Cr√©e un nouveau compte agent SFD rattach√© √† une structure financi√®re d√©centralis√©e.
        
        **Processus m√©tier**:
        1. Validation des informations personnelles
        2. V√©rification que le SFD existe et est actif
        3. Cr√©ation du compte avec les permissions d'agent
        4. Envoi des identifiants de connexion par email/SMS
        
        **Permissions requises**: Administrateur plateforme
        **Effets**: Nouvel agent op√©rationnel, peut valider documents et retraits
        """,
        responses={201: AgentSFDAdminSerializer}
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un agent SFD",
        description="R√©cup√®re les informations d√©taill√©es d'un agent SFD sp√©cifique avec ses statistiques d'activit√©."
    ),
    update=extend_schema(
        summary="Modifier un agent SFD",
        description="""
        Met √† jour les informations d'un agent SFD existant.
        
        **Modifications possibles**:
        - Informations personnelles (nom, t√©l√©phone, email)
        - Statut actif/inactif
        - Changement de SFD de rattachement
        - R√©initialisation de mot de passe
        
        **Permissions requises**: Administrateur plateforme
        **Effets**: Mise √† jour imm√©diate des permissions et acc√®s
        """
    ),
    destroy=extend_schema(
        summary="Supprimer un agent SFD",
        description="""
        D√©sactive d√©finitivement un compte agent SFD.
        
        ‚ö†Ô∏è **Attention**: Cette action est irr√©versible et affecte l'historique des validations.
        
        **Permissions requises**: Administrateur plateforme
        **Effets**: Compte d√©sactiv√©, historique conserv√©
        """
    )
)
@extend_schema_view(
    list=extend_schema(
        summary="Liste des agents SFD",
        description="""
        Affiche la liste des agents SFD enregistr√©s sur la plateforme.
        
        **R√¥le des agents SFD**:
        - Validation des documents d'identit√© des clients
        - Approbation des demandes d'ouverture de comptes √©pargne
        - Traitement des demandes de retrait
        - Gestion des clients de leur SFD
        
        **Donn√©es retourn√©es**:
        - Informations personnelles et de contact
        - SFD de rattachement
        - Nombre de clients g√©r√©s
        - Statut d'activit√© et derni√®re connexion
        
        **Permissions requises**:
        - Admin SFD: agents de sa SFD uniquement
        - Admin plateforme: tous les agents
        """,
        responses={200: AgentSFDSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un nouveau compte agent SFD",
        description="""
        Cr√©e un nouveau compte agent SFD avec les permissions appropri√©es.
        
        **Processus de cr√©ation**:
        1. Validation des informations personnelles
        2. V√©rification de l'unicit√© email/t√©l√©phone
        3. Attribution du r√¥le 'agent_sfd'
        4. Notification d'activation par email
        
        **Champs obligatoires**:
        - Nom et pr√©nom
        - Email professionnel
        - Num√©ro de t√©l√©phone
        - SFD de rattachement
        
        **Permissions requises**: Admin SFD ou Admin plateforme
        """,
        request=AgentSFDSerializer,
        responses={
            201: AgentSFDSerializer,
            400: OpenApiResponse(description="Donn√©es invalides ou email d√©j√† utilis√©"),
            403: OpenApiResponse(description="Permissions insuffisantes")
        },
        examples=[
            OpenApiExample(
                "Cr√©ation agent SFD",
                value={
                    "nom": "Traor√©",
                    "prenom": "Amadou",
                    "email": "amadou.traore@sfd.example.com",
                    "telephone": "+22370123456",
                    "motDePasse": "MotDePasse123!",
                    "sfd_id": "SFD001"
                }
            )
        ]
    )
)
@extend_schema(
    tags=["üë• Gestion des Agents SFD"],
    examples=[
        OpenApiExample(
            'Cr√©ation agent SFD',
            value={
                "nom": "Dupont",
                "prenom": "Jean",
                "email": "jean.dupont@sfd-cotonou.bj",
                "telephone": "+22967123456",
                "motDePasse": "MotDePasse123!",
                "adresse": "Rue des Cocotiers, Cotonou",
                "profession": "Agent de terrain",
                "sfd_id": "SFD001",
                "est_actif": True
            },
            request_only=True,
        )
    ]
)
class AgentSFDViewSet(viewsets.ModelViewSet):
    queryset = AgentSFD.objects.all()
    serializer_class = AgentSFDAdminSerializer
    permission_classes = [permissions.IsAuthenticated, IsAdminPlateformeOrSuperuser]

@extend_schema_view(    list=extend_schema(
        summary="Liste des superviseurs SFD",
        description="""
        Affiche la liste des superviseurs SFD avec leurs responsabilit√©s.
        
        R√¥le des superviseurs SFD:
        Examen et validation des demandes de pr√™t
        D√©finition des taux d'int√©r√™t et calendriers de remboursement
        Modification des formulaires soumis par les clients
        Transmission des dossiers √† l'admin SFD si n√©cessaire
        Suivi du statut de remboursement des pr√™ts
        
        Donn√©es retourn√©es:
        Informations personnelles et professionnelles
        SFD de rattachement et zone de supervision
        Nombre de pr√™ts en cours de traitement
        Statistiques d'approbation et performance
        
        Permissions requises:
        Admin SFD: superviseurs de sa SFD uniquement
        Admin plateforme: tous les superviseurs
        """,
        responses={200: SuperviseurSFDAdminSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un compte superviseur SFD",
        description="""
        Cr√©e un nouveau compte superviseur SFD avec les droits de validation des pr√™ts.
        
        Processus de cr√©ation:
        1. Validation des qualifications et exp√©rience
        2. Attribution des permissions de supervision
        3. D√©finition de la zone de responsabilit√©
        4. Configuration des limites d'approbation
        
        Champs obligatoires:
        Informations personnelles compl√®tes
        SFD de rattachement
        Niveau d'autorisation financi√®re
        Zone g√©ographique de supervision
        
        Permissions requises: Admin SFD ou Admin plateforme
        """,
        request=SuperviseurSFDAdminSerializer,
        responses={
            201: SuperviseurSFDAdminSerializer,
            400: OpenApiResponse(description="Donn√©es invalides"),
            403: OpenApiResponse(description="Permissions insuffisantes")
        },
        examples=[
            OpenApiExample(
                "Cr√©ation superviseur SFD",
                value={
                    "nom": "Kouassi",
                    "prenom": "Marie",
                    "email": "marie.kouassi@sfd.example.com",
                    "telephone": "+22505123456",
                    "sfd_id": "SFD001",
                    "zone_supervision": "Nord-Ouest",
                    "limite_approbation": 500000
                }
            )
        ]
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un superviseur SFD",
        description="R√©cup√®re les informations d√©taill√©es d'un superviseur SFD sp√©cifique avec ses statistiques de supervision."
    ),
    update=extend_schema(
        summary="Modifier un superviseur SFD",
        description="""
        Met √† jour les informations d'un superviseur SFD existant.
        
        Modifications possibles:
        Informations personnelles (nom, t√©l√©phone, email)
        Zone de supervision et responsabilit√©s
        Limites d'autorisation financi√®re
        Statut actif/inactif
        
        Permissions requises: Admin SFD ou Admin plateforme
        Effets: Mise √† jour imm√©diate des permissions et zones d'autorisation
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'un superviseur SFD",
        description="Met √† jour partiellement les informations d'un superviseur SFD (uniquement les champs fournis)."
    ),
    destroy=extend_schema(
        summary="Supprimer un superviseur SFD",
        description="""
        D√©sactive d√©finitivement un compte superviseur SFD.
        
        Attention: Cette action est irr√©versible et affecte les dossiers de pr√™ts en cours.
        
        Permissions requises: Admin plateforme uniquement
        Effets: Compte d√©sactiv√©, historique de supervision conserv√©
        """
    )
)
@extend_schema(
    tags=["üë• Gestion des Superviseurs SFD"],
    examples=[
        OpenApiExample(
            'Cr√©ation superviseur SFD',
            value={
                "nom": "Smith",
                "prenom": "Anna",
                "email": "anna.smith@sfd-cotonou.bj",
                "telephone": "+22967123457",
                "motDePasse": "SuperMotDePasse456!",
                "adresse": "Avenue Jean-Paul II, Porto-Novo",
                "profession": "Superviseur cr√©dit",
                "sfd_id": "SFD001",
                "est_actif": True
            },
            request_only=True,
        )
    ]
)
class SuperviseurSFDViewSet(viewsets.ModelViewSet):
    queryset = SuperviseurSFD.objects.all()
    serializer_class = SuperviseurSFDAdminSerializer
    permission_classes = [permissions.IsAuthenticated, IsAdminPlateformeOrSuperuser]

@extend_schema_view(
    list=extend_schema(
        summary="Liste des administrateurs SFD",
        description="""
        Affiche la liste des administrateurs SFD avec leurs responsabilit√©s de gestion.
        
        R√¥le des administrateurs SFD:
        Cr√©ation et configuration des tontines
        Validation finale des demandes de pr√™t
        Consultation des statistiques et logs d'activit√©
        Gestion des comptes agents et superviseurs
        D√©sactivation des comptes utilisateurs si n√©cessaire
        
        Donn√©es retourn√©es:
        Profil administratif complet
        SFD administr√©e et zone de couverture
        Statistiques de performance de la SFD
        Nombre d'utilisateurs sous supervision
        
        Permissions requises: Admin plateforme uniquement
        """,
        responses={200: AdministrateurSFDAdminSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un compte administrateur SFD",
        description="""
        Cr√©e un nouveau compte administrateur SFD avec les pleins pouvoirs sur sa SFD.
        
        Processus de cr√©ation:
        1. Validation des qualifications manag√©riales
        2. Attribution des permissions d'administration
        3. Configuration de l'acc√®s aux statistiques
        4. D√©finition des limites op√©rationnelles
        
        Responsabilit√©s assign√©es:
        Gestion compl√®te de la SFD
        Supervision des √©quipes (agents/superviseurs)
        Configuration des produits financiers
        Reporting et conformit√© r√©glementaire
        
        Permissions requises: Admin plateforme uniquement
        """,        request=AdministrateurSFDAdminSerializer,
        responses={
            201: AdministrateurSFDAdminSerializer,
            400: OpenApiResponse(description="Donn√©es invalides"),
            403: OpenApiResponse(description="Permissions insuffisantes - Admin plateforme requis")
        },
        examples=[
            OpenApiExample(
                "Cr√©ation administrateur SFD",
                value={
                    "nom": "Diabat√©",
                    "prenom": "Ibrahim",
                    "email": "ibrahim.diabate@sfd.example.com",
                    "telephone": "+22370987654",
                    "sfd_id": "SFD001",
                    "region_responsabilite": "R√©gion Centre",
                    "niveau_autorisation": "MAXIMUM"
                }
            )        ]
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un administrateur SFD",
        description="R√©cup√®re les informations d√©taill√©es d'un administrateur SFD sp√©cifique avec ses statistiques de gestion."
    ),
    update=extend_schema(
        summary="Modifier un administrateur SFD",
        description="""
        Met √† jour les informations d'un administrateur SFD existant.
        
        Modifications possibles:
        Informations personnelles (nom, t√©l√©phone, email)
        R√©gion de responsabilit√©
        Niveau d'autorisation
        Permissions de cr√©ation de tontines
        Statut actif/inactif
        
        Permissions requises: Admin plateforme uniquement
        Effets: Mise √† jour imm√©diate des permissions d'administration
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'un administrateur SFD",
        description="Met √† jour partiellement les informations d'un administrateur SFD (uniquement les champs fournis)."
    ),
    destroy=extend_schema(
        summary="Supprimer un administrateur SFD",
        description="""
        D√©sactive d√©finitivement un compte administrateur SFD.
        
        Attention: Cette action est irr√©versible et affecte la gestion de la SFD.
        
        Permissions requises: Admin plateforme uniquement
        Effets: Compte d√©sactiv√©, historique administratif conserv√©
        """
    )
)
@extend_schema(
    tags=["üë• Gestion des Admin SFD"],
    examples=[
        OpenApiExample(
            'Cr√©ation administrateur SFD',
            value={
                "nom": "Kouassi",
                "prenom": "Paul",
                "email": "paul.kouassi@sfd-parakou.bj",
                "telephone": "+22967123458",
                "motDePasse": "AdminMotDePasse789!",
                "adresse": "Boulevard de l'Ind√©pendance, Parakou",
                "profession": "Directeur SFD",
                "sfd_id": "SFD001",
                "peut_creer_tontines": True,
                "est_actif": True
            },
            request_only=True,
        )
    ]
)
class AdministrateurSFDViewSet(viewsets.ModelViewSet):
    queryset = AdministrateurSFD.objects.all()
    serializer_class = AdministrateurSFDAdminSerializer
    permission_classes = [permissions.IsAuthenticated, IsAdminPlateformeOrSuperuser]

@extend_schema_view(    list=extend_schema(
        summary="Liste des administrateurs plateforme",
        description="""
        Affiche la liste des super-administrateurs de la plateforme TontiFlex.
        
        R√¥le des administrateurs plateforme:
        Gestion globale de tous les comptes utilisateurs
        Cr√©ation, suspension et suppression des comptes (clients, agents, superviseurs, admins SFD)
        Gestion des SFD (ajout, suppression, suspension)
        Supervision de l'ensemble du syst√®me
        Configuration des param√®tres globaux de la plateforme
        
        Donn√©es retourn√©es:
        Profil administrateur complet
        Statistiques d'utilisation globales
        Nombre total d'utilisateurs et SFD g√©r√©s
        Logs d'activit√© administrative
        
        Permissions requises: Super administrateur uniquement
        """,
        responses={200: AdminPlateformeAdminSerializer(many=True)}
    ),
    create=extend_schema(
        summary="Cr√©er un compte administrateur plateforme",
        description="""
        Cr√©e un nouveau super-administrateur avec les pleins pouvoirs sur la plateforme.
        
        Processus de cr√©ation:
        Attention: Cette action cr√©e un utilisateur avec des privil√®ges maximaux
        
        1. Validation stricte des qualifications
        2. Attribution des permissions super-administrateur
        3. Configuration de l'acc√®s global au syst√®me
        4. Notification s√©curis√©e d'activation
        
        Responsabilit√©s assign√©es:
        Contr√¥le total sur tous les utilisateurs
        Gestion des SFD partenaires
        Supervision s√©curitaire du syst√®me
        Configuration des politiques globales
        
        Permissions requises: Super administrateur existant uniquement
        """,
        request=AdminPlateformeAdminSerializer,
        responses={
            201: AdminPlateformeAdminSerializer,
            400: OpenApiResponse(description="Donn√©es invalides"),
            403: OpenApiResponse(description="Permissions insuffisantes - Super admin requis")
        },        examples=[
            OpenApiExample(
                "Cr√©ation administrateur plateforme",
                value={
                    "nom": "Ouattara",
                    "prenom": "Fatou",
                    "email": "fatou.ouattara@tontiflex.com",
                    "telephone": "+22570123456",
                    "niveau_acces": "SUPER_ADMIN",
                    "zone_responsabilite": "GLOBAL"
                }
            )
        ]    ),
    retrieve=extend_schema(
        summary="D√©tails d'un administrateur plateforme",
        description="R√©cup√®re les informations d√©taill√©es d'un super-administrateur sp√©cifique avec ses statistiques d'activit√©."
    ),
    update=extend_schema(
        summary="Modifier un administrateur plateforme",
        description="""
        Met √† jour les informations d'un super-administrateur existant.
        
        Modifications possibles:
        Informations personnelles (nom, t√©l√©phone, email)
        Niveau d'acc√®s et zone de responsabilit√©
        Permissions de gestion des comptes et SFD
        Statut actif/inactif
        
        Permissions requises: Super administrateur uniquement
        Effets: Mise √† jour imm√©diate des permissions maximales
        """
    ),
    partial_update=extend_schema(
        summary="Modification partielle d'un administrateur plateforme",
        description="Met √† jour partiellement les informations d'un super-administrateur (uniquement les champs fournis)."
    ),
    destroy=extend_schema(
        summary="Supprimer un administrateur plateforme",
        description="""
        D√©sactive d√©finitivement un compte super-administrateur.
        
        Attention: Cette action est irr√©versible et r√©duit le nombre d'administrateurs syst√®me.
        
        Permissions requises: Super administrateur uniquement
        Effets: Compte d√©sactiv√©, historique administratif global conserv√©
        """
    )
)
@extend_schema(
    tags=["üë• Gestion des Admin Plateforme"],
    examples=[
        OpenApiExample(
            'Cr√©ation admin plateforme',
            value={
                "nom": "Tonti",
                "prenom": "Flex",
                "email": "admin@tontiflex.com",
                "telephone": "+22967123459",
                "motDePasse": "SuperAdminMotDePasse!",
                "adresse": "Si√®ge social TontiFlex, Abomey",
                "profession": "Super Administrateur",
                "peut_gerer_comptes": True,
                "peut_gerer_sfd": True,
                "est_actif": True
            },
            request_only=True,
        )
    ]
)
class AdminPlateformeViewSet(viewsets.ModelViewSet):
    queryset = AdminPlateforme.objects.all()
    serializer_class = AdminPlateformeAdminSerializer
    permission_classes = [permissions.IsAuthenticated, IsAdminPlateformeOrSuperuser]

@extend_schema_view(
    list=extend_schema(
        summary="Liste toutes les SFD",
        description="""
        R√©cup√®re la liste des Structures Financi√®res D√©centralis√©es enregistr√©es sur la plateforme.
        
        **Informations retourn√©es**:
        - Donn√©es officielles (nom, code, adresse l√©gale)
        - Statut d'activit√© et date d'enregistrement
        - Nombre d'agents, superviseurs, administrateurs
        - Statistiques des tontines actives
        """
    ),
    create=extend_schema(
        summary="Enregistrer une nouvelle SFD",
        description="""
        Enregistre une nouvelle Structure Financi√®re D√©centralis√©e sur la plateforme TontiFlex.
        
        **Processus d'enregistrement**:
        1. Validation des documents l√©gaux
        2. V√©rification de l'agr√©ment BCEAO/UEMOA
        3. Configuration initiale de la structure
        4. Activation des services de base
        
        **Permissions requises**: Administrateur plateforme uniquement
        **Effets**: SFD op√©rationnelle, peut cr√©er des tontines et g√©rer des clients
        """
    )
)
@extend_schema(
    summary="Gestion des SFD (Structures Financi√®res D√©centralis√©es)",
    description="Gestion compl√®te des SFD - r√©serv√© aux AdminPlateforme",
    tags=["üè¢ Gestion SFD"]
)
class SFDViewSet(viewsets.ModelViewSet):
    queryset = SFD.objects.all()
    serializer_class = SFDSerializer
    permission_classes = [permissions.IsAuthenticated, IsAdminPlateformeOrSuperuser]

# Alias for JWT login and refresh
@extend_schema(
    tags=["üîê Authentification"],
    summary="Connexion √† la plateforme",
    description="""
    Authentification JWT pour tous les types d'utilisateurs de la plateforme TontiFlex.
    
    **Types d'utilisateurs support√©s**:
    - Clients (acc√®s tontines et transactions)
    - Agents SFD (validation documents, approbation retraits)
    - Superviseurs SFD (gestion pr√™ts et supervision)
    - Administrateurs SFD (direction op√©rationnelle)
    - Administrateurs plateforme (gestion globale)
    
    **Processus d'authentification**:
    1. Validation email/mot de passe
    2. V√©rification du statut actif du compte
    3. G√©n√©ration des tokens JWT (access + refresh)
    4. Retour des informations utilisateur et permissions
    
    **Tokens retourn√©s**:
    - `access`: Token court (15 min) pour les requ√™tes API
    - `refresh`: Token long (7 jours) pour renouveler l'access token
    
    **Permissions requises**: Aucune (endpoint public)
    **Conditions**: Compte actif et valid√©
    **Effets**: Session utilisateur active, acc√®s aux endpoints autoris√©s
    """,
    request=LoginSerializer,
    responses={
        200: OpenApiResponse(
            description="Connexion r√©ussie - Tokens JWT g√©n√©r√©s",
            examples=[OpenApiExample(
                "Succ√®s connexion",
                value={
                    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "user": {
                        "id": 123,
                        "email": "marie.kouassi@email.com",
                        "nom": "Kouassi",
                        "prenom": "Marie",
                        "type_utilisateur": "CLIENT",
                        "sfd": None
                    }
                }
            )]
        ),
        401: OpenApiResponse(
            description="Identifiants incorrects",
            examples=[OpenApiExample(
                "Erreur authentification",
                value={"detail": "Email ou mot de passe incorrect."}
            )]
        ),
        403: OpenApiResponse(
            description="Compte d√©sactiv√©",
            examples=[OpenApiExample(
                "Compte inactif",
                value={"detail": "Votre compte a √©t√© d√©sactiv√©. Contactez votre administrateur."}
            )]
        )
    },
    examples=[
        OpenApiExample(
            'Connexion utilisateur',
            value={
                "email": "marie.kouassi@email.com",
                "motDePasse": "MotDePasse123!"
            },
            request_only=True,
        )
    ]
)
class LoginView(APIView):
    """
    POST /api/auth/login/
    
    Vue de connexion personnalis√©e utilisant email/motDePasse
    et retournant des tokens JWT compatibles avec le syst√®me TontiFlex.
    """
    permission_classes = [permissions.AllowAny]
    
    @extend_schema(
        tags=["üîê Authentification"],
        summary="Connexion utilisateur",
        description="""
        Authentifie un utilisateur avec email/motDePasse et retourne les tokens JWT.
        
        **Format requis**:
        - email: Adresse email de l'utilisateur
        - motDePasse: Mot de passe de l'utilisateur
        
        **Retour**:
        - access: Token d'acc√®s JWT (15 minutes)
        - refresh: Token de rafra√Æchissement (7 jours)
        - user: Informations basiques de l'utilisateur
        
        **Comment utiliser le token**:
        1. Copiez le token `access` de la r√©ponse
        2. Cliquez sur "Authorize" en haut de cette page
        3. Entrez: `Bearer YOUR_ACCESS_TOKEN`
        4. Cliquez "Authorize" pour authentifier toutes les requ√™tes
        """,
        request=LoginSerializer,
        responses={
            200: OpenApiResponse(
                description="Connexion r√©ussie",
                examples=[OpenApiExample(
                    "Succ√®s connexion",
                    value={
                        "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                        "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                        "user": {
                            "id": 1,
                            "email": "user@example.com",
                            "username": "user123",
                            "is_active": True
                        }
                    }
                )]
            ),
            400: OpenApiResponse(
                description="Donn√©es invalides",
                examples=[OpenApiExample(
                    "Erreur validation",
                    value={
                        "email": ["This field is required."],
                        "motDePasse": ["This field is required."]
                    }
                )]
            ),
            401: OpenApiResponse(
                description="Identifiants incorrects",
                examples=[OpenApiExample(
                    "Erreur authentification",
                    value={
                        "detail": "Identifiants invalides"
                    }
                )]
            ),
        }
    )
    def post(self, request):
        """Authentification avec email/motDePasse"""
        serializer = LoginSerializer(data=request.data)
        
        if not serializer.is_valid():
            return Response(
                serializer.errors,
                status=status.HTTP_400_BAD_REQUEST
            )
        
        email = serializer.validated_data['email']
        mot_de_passe = serializer.validated_data['motDePasse']
        
        # Authentification
        try:
            from django.contrib.auth import authenticate
            from rest_framework_simplejwt.tokens import RefreshToken
            
            # Trouver l'utilisateur par email
            user = User.objects.filter(email=email).first()
            if not user:
                return Response(
                    {"detail": "Identifiants invalides"},
                    status=status.HTTP_401_UNAUTHORIZED
                )
            
            # V√©rifier le mot de passe
            if not user.check_password(mot_de_passe):
                return Response(
                    {"detail": "Identifiants invalides"},
                    status=status.HTTP_401_UNAUTHORIZED
                )
            
            # G√©n√©rer les tokens JWT
            refresh = RefreshToken.for_user(user)
            
            return Response({
                'access': str(refresh.access_token),
                'refresh': str(refresh),
                'user': {
                    'id': user.id,
                    'email': user.email,
                    'username': user.username,
                    'is_active': user.is_active
                }
            }, status=status.HTTP_200_OK)
            
        except Exception as e:
            return Response(
                {"detail": "Erreur d'authentification"},
                status=status.HTTP_500_INTERNAL_SERVER_ERROR
            )

@extend_schema(
    tags=["üîê Authentification"],
    summary="Renouvellement du token d'acc√®s",
    description="""
    G√©n√®re un nouveau token d'acc√®s √† partir d'un token de rafra√Æchissement valide.
    
    **Utilisation recommand√©e**:
    - Appelez cet endpoint quand vous recevez une erreur 401 sur une requ√™te authentifi√©e
    - Impl√©mentez un refresh automatique avant expiration du token (recommand√©: 2-3 min avant)
    - Stockez le refresh token de mani√®re s√©curis√©e (httpOnly cookie recommand√©)
    
    **Cycle de vie des tokens**:
    1. Login initial ‚Üí access token (15 min) + refresh token (7 jours)
    2. Utilisation access token pour les requ√™tes API
    3. √Ä expiration ‚Üí refresh automatique avec refresh token
    4. Nouveau access token g√©n√©r√© (15 min suppl√©mentaires)
    5. Si refresh token expir√© ‚Üí nouvelle connexion requise
    
    **S√©curit√©**:
    - Le refresh token n'est valide qu'une seule fois
    - Chaque refresh g√©n√®re un nouveau couple access/refresh
    - Les anciens tokens sont automatiquement invalid√©s
    
    **Permissions requises**: Token refresh valide
    **Conditions**: Refresh token non expir√© et non utilis√©
    **Effets**: Nouveaux tokens g√©n√©r√©s, session prolong√©e
    """,
    responses={
        200: OpenApiResponse(
            description="Token renouvel√© avec succ√®s",
            examples=[OpenApiExample(
                "Succ√®s renouvellement",
                value={
                    "access": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9...",
                    "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
                }
            )]
        ),
        401: OpenApiResponse(
            description="Token refresh invalide ou expir√©",
            examples=[OpenApiExample(
                "Token invalide",
                value={"detail": "Token invalide ou expir√©."}
            )]
        )
    },
    examples=[
        OpenApiExample(
            'Renouvellement token',
            value={
                "refresh": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
            },
            request_only=True,
        )
    ]
)
class TokenRefreshViewCustom(TokenRefreshView):
    """
    POST /api/auth/token/refresh/
    """
    permission_classes = [permissions.AllowAny]

from django.db.models import Sum
# ============================================================================
# VIEWSETS POUR API REST 
# ============================================================================

@extend_schema_view(
    list=extend_schema(
        summary="Liste des clients",
        description="""
        R√©cup√®re la liste des clients enregistr√©s sur la plateforme TontiFlex.
        
        **Informations retourn√©es**:
        - Donn√©es personnelles (nom, pr√©nom, t√©l√©phone, email)
        - Statistiques des participations aux tontines
        - Statut du compte et date d'inscription
        - Informations de contact et localisation
        
        **Filtres disponibles**:
        - Par SFD de rattachement
        - Par statut de participation active
        - Par date d'inscription
        - Recherche textuelle (nom, email, t√©l√©phone)
        
        **Permissions requises**: Utilisateur authentifi√©
        **Conditions**: Visibilit√© selon le r√¥le (agent voit ses clients SFD)
        """,
        responses={200: ClientSerializer(many=True)}
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un client",
        description="""
        R√©cup√®re les informations d√©taill√©es d'un client sp√©cifique avec ses statistiques d'activit√©.
        
        **Donn√©es incluses**:
        - Profil complet du client
        - Nombre de tontines actives et termin√©es
        - Montant total des cotisations vers√©es
        - Historique des retraits effectu√©s
        - Statut des demandes en cours
        
        **Permissions requises**: 
        - Client: peut voir uniquement son propre profil
        - Agent/Superviseur/Admin SFD: clients de leur SFD
        - Admin plateforme: tous les clients
        """
    )
)
@extend_schema_view(
    list=extend_schema(
        summary="Liste des clients enregistr√©s",
        description="""
        R√©cup√®re la liste des clients enregistr√©s sur la plateforme TontiFlex.
        
        **Informations client**:
        - Donn√©es personnelles (nom, pr√©nom, t√©l√©phone, email)
        - Informations de contact et localisation
        - Date d'inscription et statut du compte
        - Profession et revenus d√©clar√©s
        
        **Statistiques d'activit√©**:
        - Nombre de tontines actives
        - Total des cotisations vers√©es
        - Historique des retraits
        - Taux de ponctualit√© global
        
        **Filtres et recherche**:
        - Recherche par nom, email ou t√©l√©phone
        - Filtrage par SFD de rattachement
        - Filtrage par statut de participation
        - Tri par date d'inscription ou activit√©
        
        **Permissions et visibilit√©**:
        - Client: peut voir uniquement son propre profil
        - Agent/Superviseur/Admin SFD: clients de leur SFD
        - Admin plateforme: tous les clients
        """,
        responses={200: ClientSerializer(many=True)}
    ),
    retrieve=extend_schema(
        summary="D√©tails d'un client sp√©cifique",
        description="""
        R√©cup√®re les informations d√©taill√©es d'un client avec ses statistiques.
        
        **Profil complet**:
        - Toutes les donn√©es personnelles
        - Historique d'activit√© d√©taill√©
        - Performances dans les tontines
        - √âvaluations et notes
        
        **M√©triques de performance**:
        - Ponctualit√© des cotisations
        - Montants totaux g√©r√©s
        - Nombre de cycles compl√©t√©s
        - Historique des distributions re√ßues
        
        **Informations de s√©curit√©**:
        - Derni√®re connexion
        - Activit√© r√©cente
        - Statut de v√©rification des documents
        - Niveau de confiance
        """,
        responses={
            200: ClientSerializer,
            403: OpenApiResponse(description="Acc√®s refus√© √† ce profil"),
            404: OpenApiResponse(description="Client introuvable")
        }
    )
)
@extend_schema(tags=["üë§ Clients"])
class ClientViewSet(viewsets.ReadOnlyModelViewSet):
    """ViewSet pour la gestion des clients"""
    queryset = Client.objects.all()
    serializer_class = ClientSerializer
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="Historique des cotisations du client",
        description="""
        R√©cup√®re l'historique complet des cotisations effectu√©es par un client.
        
        **Informations retourn√©es**:
        - Liste chronologique de toutes les cotisations
        - Montants vers√©s et dates de transaction
        - Tontines concern√©es et statuts de paiement
        - R√©f√©rences Mobile Money et confirmations
        - Statistiques de ponctualit√© et r√©gularit√©
        
        **Calculs inclus**:
        - Total des cotisations vers√©es
        - Moyenne mensuelle de cotisation
        - Nombre de jours de ponctualit√©
        - Bonus et p√©nalit√©s appliqu√©s
        
        **Permissions**:
        - Client: son propre historique uniquement
        - Agent/Superviseur/Admin SFD: clients de leur SFD
        - Admin plateforme: tous les clients
        """,
        responses={
            200: OpenApiResponse(
                description="Historique des cotisations r√©cup√©r√©",
                examples=[
                    OpenApiExample(
                        "Historique cotisations",
                        value={
                            "total_cotisations": 750000,
                            "cotisations": [
                                {
                                    "id": 123,
                                    "montant": 25000,
                                    "date_cotisation": "2025-06-25T09:00:00Z",
                                    "tontine": "Commer√ßants Cotonou",
                                    "statut": "confirme",
                                    "is_commission_sfd": False
                                }
                            ]
                        }
                    )
                ]
            ),
            403: OpenApiResponse(description="Acc√®s refus√© √† cet historique"),
            404: OpenApiResponse(description="Client introuvable")
        }
    )
    @action(detail=True, methods=['get'], url_path='cotisations')
    def cotisations(self, request, pk=None):
        """Historique des cotisations d'un client"""
        client = self.get_object()
        from tontines.models import Cotisation
        cotisations = Cotisation.objects.filter(client=client)
        return Response({'cotisations': list(cotisations.values())})

    @extend_schema(
        summary="Historique des retraits du client",
        description="""
        R√©cup√®re l'historique des demandes et retraits effectu√©s par un client.
        
        **Types de retraits**:
        - Retraits partiels de solde tontine
        - Retraits de fin de cycle
        - Retraits d'urgence (avec justification)
        - Distributions re√ßues lors du tour du client
        
        **Informations d√©taill√©es**:
        - Montants demand√©s et montants re√ßus
        - Dates de demande et de traitement
        - Statuts (en attente, valid√©, trait√©, rejet√©)
        - Agents validateurs et motifs de rejet
        - Frais de traitement appliqu√©s
        
        **Statistiques**:
        - Total des retraits effectu√©s
        - D√©lai moyen de traitement
        - Taux d'approbation des demandes
        - Solde restant disponible
        
        **Permissions**:
        - Client: son propre historique uniquement  
        - Agent/Superviseur/Admin SFD: clients de leur SFD
        - Admin plateforme: tous les clients
        """,
        responses={
            200: OpenApiResponse(
                description="Historique des retraits r√©cup√©r√©",
                examples=[
                    OpenApiExample(
                        "Historique retraits",
                        value={
                            "total_retraits": 125000,
                            "retraits": [
                                {
                                    "id": 45,
                                    "montant_demande": 50000,
                                    "montant_recu": 49500,
                                    "date_demande": "2025-06-20T14:00:00Z",
                                    "date_traitement": "2025-06-21T10:30:00Z",
                                    "statut": "traite",
                                    "tontine": "√âpargne Famille",
                                    "agent_validateur": "Agent Kouassi",
                                    "frais_traitement": 500
                                }
                            ]
                        }
                    )
                ]
            ),
            403: OpenApiResponse(description="Acc√®s refus√© √† cet historique"),
            404: OpenApiResponse(description="Client introuvable")
        }
    )
    @action(detail=True, methods=['get'], url_path='retraits')
    def retraits(self, request, pk=None):
        """Historique des retraits d'un client"""
        client = self.get_object()
        from tontines.models import Retrait
        retraits = Retrait.objects.filter(client=client)
        return Response({'retraits': list(retraits.values())})

    @extend_schema(
        summary="Tontines du client",
        description="""
        R√©cup√®re la liste des tontines auxquelles le client participe activement.
        
        **Participations actives**:
        - Tontines en cours avec cotisations r√©guli√®res
        - Statut de participation (actif, suspendu, en attente)
        - Position dans l'ordre de distribution
        - Prochaine date de r√©ception pr√©vue
        
        **D√©tails par tontine**:
        - Nom et description de la tontine
        - SFD gestionnaire et administrateur
        - Montant de cotisation convenu
        - Nombre total de participants
        - Cycle actuel et progression
        - Solde accumul√© dans la tontine
        
        **Statistiques de participation**:
        - Nombre de cotisations effectu√©es
        - Taux de ponctualit√©
        - Montant total cotis√©
        - Prochaines √©ch√©ances
        - Historique des distributions re√ßues
        
        **√âtats possibles**:
        - `actif`: Participation normale en cours
        - `suspendu`: Participation temporairement suspendue
        - `en_attente`: En attente de validation/paiement
        - `termine`: Tontine termin√©e, cycle complet
        
        **Permissions**:
        - Client: ses propres participations uniquement
        - Agent/Superviseur/Admin SFD: clients de leur SFD
        - Admin plateforme: tous les clients
        """,
        responses={
            200: OpenApiResponse(
                description="Liste des tontines du client",
                examples=[
                    OpenApiExample(
                        "Tontines actives",
                        value={
                            "total_tontines": 2,
                            "tontines_actives": 2,
                            "tontines": [
                                {
                                    "id": 12,
                                    "nom": "Commer√ßants Cotonou",
                                    "sfd": "SFD Cotonou Centre",
                                    "montant_cotisation": 25000,
                                    "statut_participation": "actif",
                                    "rang_distribution": 8,
                                    "solde_accumule": 350000,
                                    "prochaine_distribution": "2025-07-15T00:00:00Z",
                                    "taux_ponctualite": 95.5
                                },
                                {
                                    "id": 18,
                                    "nom": "√âpargne Famille",
                                    "sfd": "SFD Parakou",
                                    "montant_cotisation": 15000,
                                    "statut_participation": "actif",
                                    "rang_distribution": 3,
                                    "solde_accumule": 180000,
                                    "prochaine_distribution": "2025-08-02T00:00:00Z",
                                    "taux_ponctualite": 100.0
                                }
                            ]
                        }
                    )
                ]
            ),
            403: OpenApiResponse(description="Acc√®s refus√© √† ces informations"),
            404: OpenApiResponse(description="Client introuvable")
        }
    )
    @action(detail=True, methods=['get'], url_path='tontines')
    def tontines(self, request, pk=None):
        """Tontines d'un client"""
        client = self.get_object()
        from tontines.models import TontineParticipant
        participations = TontineParticipant.objects.filter(client=client, statut='actif')
        return Response({'tontines': list(participations.values())})


@extend_schema_view(
    list=extend_schema(
        summary="Liste des agents SFD (lecture seule)",
        description="""
        Affiche la liste des agents SFD en mode consultation uniquement.
        
        **Diff√©rence avec AgentSFDViewSet**:
        - Version lecture seule (pas de cr√©ation/modification)
        - Acc√®s √©largi pour consultation inter-SFD
        - Informations publiques uniquement
        - Optimis√© pour les requ√™tes de r√©f√©rence
        
        **Donn√©es visibles**:
        - Nom et informations de contact publiques
        - SFD de rattachement
        - Statut d'activit√©
        - Zone g√©ographique de couverture
        
        **Utilisation**:
        - S√©lection d'agent pour validation
        - Annuaire des agents inter-SFD
        - R√©f√©rence pour les clients
        - Coordination entre SFD partenaires
        """,
        responses={200: AgentSFDSerializer(many=True)}
    )
)
@extend_schema(tags=["üë• Agents SFD"])
class AgentSFDReadOnlyViewSet(viewsets.ReadOnlyModelViewSet):
    queryset = AgentSFD.objects.all()
    serializer_class = AgentSFDSerializer
    permission_classes = [permissions.IsAuthenticated]


@extend_schema_view(
    list=extend_schema(
        summary="Liste des SFD de l'API",
        description="""
        Interface API principale pour la gestion des Structures Financi√®res D√©centralis√©es.
        
        **Fonctionnalit√©s √©tendues**:
        - Gestion compl√®te CRUD des SFD
        - Actions personnalis√©es pour rapports
        - Endpoints statistiques avanc√©s
        - Int√©gration avec syst√®mes externes
        
        **Diff√©rence avec SFDViewSet admin**:
        - Interface publique pour partenaires
        - Endpoints d'int√©gration syst√®me
        - Donn√©es statistiques enrichies
        - API destin√©e aux applications clientes
        
        **Permissions**:
        - Lecture: Utilisateurs authentifi√©s
        - √âcriture: Admin SFD et Admin plateforme
        """,
        responses={200: SFDSerializer(many=True)}
    )
)
@extend_schema(tags=["üè¢ SFD"])
class SFDAPIViewSet(viewsets.ModelViewSet):
    queryset = SFD.objects.all()
    serializer_class = SFDSerializer
    permission_classes = [permissions.IsAuthenticated]

    @extend_schema(
        summary="Cotisations d'un client pour une SFD",
        description="""
        R√©cup√®re l'historique des cotisations d'un client sp√©cifique dans les tontines d'une SFD.
        
        **Port√©e de la requ√™te**:
        - Cotisations uniquement dans les tontines de la SFD sp√©cifi√©e
        - Filtrage automatique par SFD pour s√©curit√©
        - Historique complet depuis l'adh√©sion
        - Tous types de cotisations (normales + commissions SFD)
        
        **Donn√©es d√©taill√©es**:
        - Montants et dates de chaque cotisation
        - Tontines concern√©es dans la SFD
        - Statuts de paiement et confirmations
        - R√©f√©rences Mobile Money
        - Calculs de ponctualit√© et r√©gularit√©
        
        **Statistiques SFD**:
        - Total cotis√© dans cette SFD
        - Nombre de tontines de la SFD fr√©quent√©es
        - Performance de paiement relative √† la SFD
        - Comparaison avec autres clients de la SFD
        
        **Cas d'usage**:
        - Suivi client par les agents SFD
        - √âvaluation pour nouveaux produits
        - Reporting de performance SFD
        - Validation de capacit√© financi√®re
        
        **Permissions**:
        - Agent/Superviseur/Admin SFD: clients de leur SFD uniquement
        - Admin plateforme: tous les clients et toutes les SFD
        """,
        responses={
            200: OpenApiResponse(
                description="Cotisations du client pour cette SFD",
                examples=[
                    OpenApiExample(
                        "Cotisations SFD sp√©cifique",
                        value={
                            "client_nom": "Marie Kouassi",
                            "sfd_nom": "SFD Cotonou Centre",
                            "total_cotise_sfd": 485000,
                            "nombre_tontines_sfd": 2,
                            "cotisations": [
                                {
                                    "id": 234,
                                    "tontine": "Commer√ßants Cotonou",
                                    "montant": 25000,
                                    "date": "2025-06-25T09:00:00Z",
                                    "type": "cotisation_normale",
                                    "statut": "confirme"
                                },
                                {
                                    "id": 235,
                                    "tontine": "√âpargne Mensuelle",
                                    "montant": 15000,
                                    "date": "2025-06-24T14:30:00Z",
                                    "type": "commission_sfd",
                                    "statut": "confirme"
                                }
                            ],
                            "statistiques": {
                                "taux_ponctualite_sfd": 96.5,
                                "moyenne_cotisation": 20000,
                                "jours_activite": 45
                            }
                        }
                    )
                ]
            ),
            403: OpenApiResponse(description="Acc√®s refus√© - SFD diff√©rente"),
            404: OpenApiResponse(description="Client ou SFD introuvable")
        }
    )
    @action(detail=True, methods=['get'], url_path='clients/(?P<client_id>[^/.]+)/cotisations')
    def client_cotisations(self, request, pk=None, client_id=None):
        """Cotisations d'un client pour un SFD"""
        sfd = self.get_object()
        try:
            client = Client.objects.get(id=client_id)
            from tontines.models import Cotisation
            cotisations = Cotisation.objects.filter(
                client=client,
                tontine__administrateurId__sfd=sfd
            )
            return Response({
                'sfd': sfd.nom,
                'client': client.nom_complet,
                'cotisations': list(cotisations.values())
            })
        except Client.DoesNotExist:
            return Response({'error': 'Client introuvable'}, status=404)


# ============================================================================
# VIEWSETS ADMINISTRATIFS
# ============================================================================
